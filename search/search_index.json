{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"\ud83c\udf10 Dokumentasi JavaScript","text":"<p>Selamat datang di Dokumentasi JavaScript, panduan lengkap untuk memahami bahasa pemrograman paling populer di dunia \u2014 dari dasar hingga tingkat lanjut.</p> <p>JavaScript adalah jantung dari web modern. Ia menghidupkan halaman web, memungkinkan interaksi dinamis, dan bahkan dapat digunakan untuk membangun aplikasi backend, mobile, dan desktop.</p>"},{"location":"#apa-yang-akan-kamu-pelajari","title":"\ud83d\ude80 Apa yang Akan Kamu Pelajari?","text":"<p>Dokumentasi ini dirancang untuk mencakup seluruh spektrum JavaScript:</p> <ul> <li>Dasar-Dasar: Mulai dari variabel, tipe data, hingga kontrol alur program.</li> <li>Fungsi &amp; Struktur Data: Pelajari cara kerja fungsi, array, dan object di JavaScript.</li> <li>Manipulasi DOM: Cara mengontrol dan mengubah isi halaman web secara dinamis.</li> <li>Asynchronous JavaScript: Pahami cara kerja asynchronous, promise, dan async/await.</li> <li>JavaScript Modern: Fitur-fitur baru dari ES6 ke atas yang menyederhanakan sintaks dan meningkatkan performa.</li> <li>Advanced Topics: Dalami konsep seperti closure, event loop, inheritance, hingga functional programming.</li> <li>Testing &amp; Best Practices: Cara menulis kode JavaScript yang teruji dan rapi.</li> <li>Aplikasi Dunia Nyata: Gunakan JavaScript untuk membangun aplikasi web dan backend modern.</li> </ul>"},{"location":"#untuk-siapa-dokumentasi-ini","title":"\ud83c\udfaf Untuk Siapa Dokumentasi Ini?","text":"<ul> <li>\ud83d\udca1 Pemula: yang ingin memahami JavaScript dari nol.</li> <li>\ud83d\udd27 Pengembang: yang ingin memperkuat dasar atau memperdalam kemampuan.</li> <li>\ud83d\udcd8 Mahasiswa: yang ingin referensi praktis untuk tugas atau skripsi.</li> <li>\ud83e\udde0 Penasaran: yang ingin tahu kenapa JavaScript tetap relevan hingga sekarang.</li> </ul>"},{"location":"#struktur-navigasi","title":"\ud83d\udce6 Struktur Navigasi","text":"<p>Lihat sidebar kiri untuk mengeksplorasi berbagai topik secara sistematis.</p> <p>\u201cAny application that can be written in JavaScript, will eventually be written in JavaScript.\u201d \u2014 Jeff Atwood</p> <p>Selamat belajar dan selamat bereksperimen!</p> <p>\ud83e\uddd1\u200d\ud83d\udcbb Dengan semangat JavaScript, Tim Dokumentasi</p>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"10_advanced/1_inheritance/","title":"Pewarisan (Inheritance)","text":"<p>Pewarisan adalah konsep di mana sebuah objek dapat mewarisi properti dan method dari objek lain. Di JavaScript, pewarisan sering digunakan untuk membangun hierarki objek, memungkinkan kita menulis kode yang lebih reusable dan terstruktur.</p>"},{"location":"10_advanced/1_inheritance/#pewarisan-melalui-prototype","title":"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 Pewarisan Melalui Prototype","text":"<p>Setiap objek di JavaScript memiliki properti internal yang disebut <code>[[Prototype]]</code>, yang dapat diakses melalui <code>__proto__</code> atau lebih disarankan melalui <code>Object.getPrototypeOf()</code>.</p> <pre><code>const manusia = {\n  makan() {\n    console.log(\"Sedang makan\");\n  }\n};\n\nconst mahasiswa = {\n  belajar() {\n    console.log(\"Sedang belajar\");\n  }\n};\n\nObject.setPrototypeOf(mahasiswa, manusia);\n\nmahasiswa.belajar(); // Sedang belajar\nmahasiswa.makan();   // Sedang makan (diturunkan dari manusia)\n````\n\n---\n\n## \ud83c\udfd7\ufe0f Pewarisan dengan Function Constructor\n\n```javascript\nfunction Kendaraan(merk) {\n  this.merk = merk;\n}\nKendaraan.prototype.hidupkan = function () {\n  console.log(`${this.merk} dinyalakan`);\n};\n\nfunction Mobil(merk, tipe) {\n  Kendaraan.call(this, merk);\n  this.tipe = tipe;\n}\nMobil.prototype = Object.create(Kendaraan.prototype);\nMobil.prototype.constructor = Mobil;\n\nconst civic = new Mobil(\"Honda\", \"Civic\");\ncivic.hidupkan(); // Honda dinyalakan\n</code></pre>"},{"location":"10_advanced/1_inheritance/#pewarisan-dengan-es6-class","title":"\ud83e\uddec Pewarisan dengan ES6 Class","text":"<p>ES6 memperkenalkan sintaks <code>class</code> yang membuat pewarisan lebih bersih dan mudah dibaca.</p> <pre><code>class Hewan {\n  constructor(nama) {\n    this.nama = nama;\n  }\n\n  suara() {\n    console.log(`${this.nama} bersuara`);\n  }\n}\n\nclass Kucing extends Hewan {\n  suara() {\n    console.log(`${this.nama} meong~`);\n  }\n}\n\nconst pus = new Kucing(\"Pus\");\npus.suara(); // Pus meong~\n</code></pre>"},{"location":"10_advanced/1_inheritance/#super-dan-overriding","title":"\ud83e\udde0 <code>super()</code> dan Overriding","text":"<p>Method <code>super()</code> digunakan untuk memanggil constructor atau method dari parent class.</p> <pre><code>class Kendaraan {\n  constructor(merk) {\n    this.merk = merk;\n  }\n\n  info() {\n    return `Kendaraan: ${this.merk}`;\n  }\n}\n\nclass Motor extends Kendaraan {\n  constructor(merk, cc) {\n    super(merk); // memanggil constructor Kendaraan\n    this.cc = cc;\n  }\n\n  info() {\n    return `${super.info()} - ${this.cc} cc`;\n  }\n}\n\nconst vixion = new Motor(\"Yamaha\", 150);\nconsole.log(vixion.info()); // Kendaraan: Yamaha - 150 cc\n</code></pre>"},{"location":"10_advanced/1_inheritance/#catatan-penting","title":"\u2728 Catatan Penting","text":"<ul> <li>Gunakan <code>class</code> jika kamu ingin kode yang lebih modern dan rapi.</li> <li>Pewarisan dapat membuat kode kompleks jika digunakan berlebihan \u2014 gunakan dengan bijak.</li> <li>Komposisi bisa menjadi alternatif yang lebih fleksibel dibanding pewarisan.</li> </ul> <p>\"Favor composition over inheritance.\" \u2013 Prinsip penting dalam desain perangkat lunak modern.</p> <p>```</p>"},{"location":"10_advanced/2_event-loop/","title":"\u23f3 Event Loop di JavaScript","text":"<p>Event Loop adalah mekanisme di balik layar yang memungkinkan JavaScript (yang bersifat single-threaded) untuk menangani operasi asynchronous seperti pengambilan data dari server tanpa memblokir eksekusi kode lainnya.</p>"},{"location":"10_advanced/2_event-loop/#bagaimana-event-loop-bekerja","title":"\ud83d\udd01 Bagaimana Event Loop Bekerja?","text":"<ol> <li> <p>Call Stack    Tempat eksekusi fungsi secara sinkron. Fungsi yang dipanggil dimasukkan ke stack, dan dikeluarkan setelah selesai.</p> </li> <li> <p>Web APIs / Node APIs    Operasi async seperti <code>setTimeout</code>, <code>fetch</code>, atau event listener tidak langsung masuk ke call stack, tapi ke API lingkungan (browser/Node).</p> </li> <li> <p>Callback Queue    Setelah operasi async selesai, callback-nya dikirim ke antrian ini, menunggu giliran untuk dieksekusi.</p> </li> <li> <p>Event Loop    Tugasnya adalah memeriksa apakah call stack kosong. Jika kosong, callback dari queue dimasukkan ke stack untuk dieksekusi.</p> </li> </ol>"},{"location":"10_advanced/2_event-loop/#contoh-sederhana","title":"\ud83d\udcdc Contoh Sederhana","text":"<pre><code>console.log('A');\n\nsetTimeout(() =&gt; {\n  console.log('B');\n}, 0);\n\nconsole.log('C');\n````\n\n### Output:\n\n</code></pre> <p>A C B</p> <pre><code>\nMeskipun timeout-nya 0ms, callback `console.log('B')` tetap ditunda karena menunggu call stack kosong.\n\n## \ud83c\udfaf Microtask vs Macrotask\n\n* **Macrotask Queue**: `setTimeout`, `setInterval`, I/O.\n* **Microtask Queue**: `Promise.then`, `MutationObserver`.\n\nMicrotask selalu diproses sebelum macrotask dalam satu putaran event loop.\n\n### Contoh Microtask vs Macrotask\n\n```javascript\nsetTimeout(() =&gt; console.log('Timeout'), 0);\nPromise.resolve().then(() =&gt; console.log('Promise'));\nconsole.log('Sync');\n</code></pre>"},{"location":"10_advanced/2_event-loop/#output","title":"Output:","text":"<pre><code>Sync\nPromise\nTimeout\n</code></pre>"},{"location":"10_advanced/2_event-loop/#kesimpulan","title":"\ud83e\udde0 Kesimpulan","text":"<ul> <li>JavaScript tetap responsif berkat event loop.</li> <li>Microtask dieksekusi sebelum macrotask.</li> <li>Pahami event loop untuk debug async dan performa yang lebih baik.</li> </ul> <pre><code>\nJika kamu ingin tambahan visualisasi atau diagram animasi untuk menjelaskan event loop, aku bisa bantu buatkan juga.\n</code></pre>"},{"location":"10_advanced/3_web-storage/","title":"\ud83d\uddc4\ufe0f Web Storage di JavaScript","text":"<p>Web Storage API menyediakan cara untuk menyimpan data secara lokal di browser pengguna. Ada dua jenis utama: <code>localStorage</code> dan <code>sessionStorage</code>.</p>"},{"location":"10_advanced/3_web-storage/#perbedaan-localstorage-dan-sessionstorage","title":"\ud83e\uddf1 Perbedaan localStorage dan sessionStorage","text":"Fitur localStorage sessionStorage Durasi Penyimpanan Permanen (hingga dihapus manual) Hanya selama sesi browser aktif Akses Antar Tab Ya, dapat diakses di tab yang berbeda Tidak, hanya di tab asal Ukuran Maksimal Sekitar 5\u201310 MB Sekitar 5 MB"},{"location":"10_advanced/3_web-storage/#cara-menggunakan-localstorage","title":"\ud83d\udce6 Cara Menggunakan localStorage","text":"<pre><code>// Menyimpan data\nlocalStorage.setItem('nama', 'Marno');\n\n// Mengambil data\nconst nama = localStorage.getItem('nama');\nconsole.log(nama); // Marno\n\n// Menghapus data\nlocalStorage.removeItem('nama');\n\n// Menghapus semua data\nlocalStorage.clear();\n````\n\n---\n\n## \ud83e\udded Cara Menggunakan sessionStorage\n\n```javascript\nsessionStorage.setItem('loginStatus', 'true');\n\nconst status = sessionStorage.getItem('loginStatus');\nconsole.log(status); // true\n\nsessionStorage.removeItem('loginStatus');\n</code></pre>"},{"location":"10_advanced/3_web-storage/#kapan-menggunakan-localstorage-vs-sessionstorage","title":"\ud83d\udee1\ufe0f Kapan Menggunakan localStorage vs sessionStorage?","text":"<ul> <li>Gunakan <code>localStorage</code> untuk data jangka panjang (seperti preferensi tema, token login).</li> <li>Gunakan <code>sessionStorage</code> untuk data sementara yang hanya berlaku selama tab terbuka (seperti data form sementara).</li> </ul>"},{"location":"10_advanced/3_web-storage/#catatan-keamanan","title":"\u26a0\ufe0f Catatan Keamanan","text":"<ul> <li>Jangan menyimpan data sensitif (seperti password atau token akses) di localStorage/sessionStorage karena dapat diakses oleh JavaScript dan rawan XSS.</li> <li>Gunakan HTTP-only cookies jika perlu menyimpan token secara aman.</li> </ul>"},{"location":"10_advanced/3_web-storage/#kesimpulan","title":"\ud83d\udcda Kesimpulan","text":"<p>Web Storage sangat berguna untuk menyimpan data kecil secara lokal tanpa memerlukan server, namun harus digunakan dengan bijak dan aman.</p> <pre><code>\n---\n\nKalau kamu ingin saya buatkan juga bagian lanjutan seperti IndexedDB atau mengintegrasikan storage dengan aplikasi real-time, tinggal bilang saja!\n</code></pre>"},{"location":"10_advanced/4_functional/","title":"\ud83d\udd01 Pemrograman Fungsional di JavaScript","text":"<p>Pemrograman fungsional (Functional Programming/FP) adalah paradigma pemrograman yang berfokus pada penggunaan fungsi murni, imutabilitas data, dan penghindaran efek samping.</p>"},{"location":"10_advanced/4_functional/#ciri-ciri-pemrograman-fungsional","title":"\ud83d\udcd0 Ciri-ciri Pemrograman Fungsional","text":"<ul> <li>Fungsi murni (pure function): tidak mengubah data di luar dirinya dan selalu mengembalikan hasil yang sama untuk input yang sama.</li> <li>Imutabilitas: data tidak diubah setelah dibuat.</li> <li>Fungsi sebagai first-class citizen: fungsi bisa disimpan dalam variabel, dikirim sebagai parameter, atau dikembalikan dari fungsi lain.</li> <li>Deklaratif, bukan imperatif: fokus pada apa yang dilakukan, bukan bagaimana.</li> </ul>"},{"location":"10_advanced/4_functional/#contoh-fungsi-murni","title":"\ud83d\udd0d Contoh Fungsi Murni","text":"<pre><code>// Fungsi murni\nfunction tambah(a, b) {\n  return a + b;\n}\n\n// Bukan fungsi murni (karena memodifikasi variabel di luar dirinya)\nlet total = 0;\nfunction tambahGlobal(a) {\n  total += a;\n}\n````\n\n---\n\n## \ud83e\uddf0 Higher-Order Function\n\nFungsi yang menerima fungsi lain sebagai argumen atau mengembalikan fungsi lain.\n\n```javascript\nfunction repeat(fn, n) {\n  for (let i = 0; i &lt; n; i++) {\n    fn();\n  }\n}\n\nrepeat(() =&gt; console.log(\"Halo!\"), 3);\n</code></pre>"},{"location":"10_advanced/4_functional/#method-array-map-filter-reduce","title":"\ud83e\uddfc Method Array: map, filter, reduce","text":""},{"location":"10_advanced/4_functional/#map-transformasi-elemen","title":"<code>map</code>: transformasi elemen","text":"<pre><code>const angka = [1, 2, 3];\nconst kuadrat = angka.map(n =&gt; n * n);\nconsole.log(kuadrat); // [1, 4, 9]\n</code></pre>"},{"location":"10_advanced/4_functional/#filter-menyaring-elemen","title":"<code>filter</code>: menyaring elemen","text":"<pre><code>const ganjil = angka.filter(n =&gt; n % 2 === 1);\nconsole.log(ganjil); // [1, 3]\n</code></pre>"},{"location":"10_advanced/4_functional/#reduce-akumulasi-elemen","title":"<code>reduce</code>: akumulasi elemen","text":"<pre><code>const total = angka.reduce((acc, cur) =&gt; acc + cur, 0);\nconsole.log(total); // 6\n</code></pre>"},{"location":"10_advanced/4_functional/#imutabilitas","title":"\ud83d\udd04 Imutabilitas","text":"<p>Gunakan spread operator atau metode <code>Array.prototype</code> untuk menjaga data tetap tidak berubah:</p> <pre><code>const buah = ['apel', 'jeruk'];\nconst buahBaru = [...buah, 'mangga']; // Tidak mengubah array asli\n</code></pre>"},{"location":"10_advanced/4_functional/#contoh-chaining-fp","title":"\ud83e\uddea Contoh chaining FP","text":"<pre><code>const hasil = [1, 2, 3, 4, 5]\n  .map(n =&gt; n * 2)\n  .filter(n =&gt; n &gt; 5)\n  .reduce((a, b) =&gt; a + b, 0);\n\nconsole.log(hasil); // 18\n</code></pre>"},{"location":"10_advanced/4_functional/#kesimpulan","title":"\ud83d\udcce Kesimpulan","text":"<p>Pemrograman fungsional membantu membuat kode lebih modular, bersih, dan mudah diuji. JavaScript bukan bahasa FP murni, tetapi sangat mendukung gaya ini melalui <code>map</code>, <code>filter</code>, <code>reduce</code>, dan first-class function.</p> <p>```</p>"},{"location":"11_modern-js/1_fitur-baru-es6/","title":"1 fitur baru es6","text":""},{"location":"11_modern-js/1_fitur-baru-es6/#fitur-baru-es6md","title":"<code>fitur-baru-es6.md</code>","text":"<p>\ud83d\udccc Judul: Fitur Baru di ES6 (ECMAScript 2015)</p> <p>Deskripsi: ES6 (ECMAScript 2015) membawa banyak fitur baru yang membuat JavaScript lebih modern, ekspresif, dan efisien. Modul ini memperkenalkan berbagai fitur penting seperti <code>let</code>, <code>const</code>, arrow function, template literals, dan lainnya.</p>"},{"location":"11_modern-js/1_fitur-baru-es6/#materi-yang-dibahas","title":"\ud83d\udcda Materi yang Dibahas:","text":"<ol> <li> <p><code>let</code> dan <code>const</code></p> </li> <li> <p><code>let</code>: variabel dengan cakupan blok (block scope)</p> </li> <li> <p><code>const</code>: nilai konstan, tidak bisa di-reassign</p> </li> <li> <p>Arrow Function</p> </li> <li> <p>Sintaks singkat untuk fungsi</p> </li> <li> <p>Tidak memiliki <code>this</code> sendiri</p> </li> <li> <p>Template Literals</p> </li> <li> <p>String dengan ekspresi dinamis menggunakan backtick (<code>`</code>)</p> </li> <li> <p>Destructuring Assignment</p> </li> <li> <p>Memecah array atau objek menjadi variabel terpisah</p> </li> <li> <p>Default Parameters</p> </li> <li> <p>Memberi nilai default ke parameter fungsi</p> </li> <li> <p>Rest dan Spread Operator</p> </li> <li> <p><code>...</code> untuk menggabung, menyalin, atau memisahkan elemen</p> </li> <li> <p>Enhanced Object Literals</p> </li> <li> <p>Penulisan properti dan method lebih singkat</p> </li> <li> <p>Classes</p> </li> <li> <p>Sintaks OOP berbasis prototype</p> </li> <li> <p>Modules (ES6 Modules)</p> </li> <li> <p><code>export</code> dan <code>import</code> antar file JS</p> </li> <li> <p>Promises</p> </li> <li> <p>Penanganan asynchronous yang lebih bersih dari callback</p> </li> </ol> <p>Jika ingin, saya bisa bantu merapikan file ini menjadi format dokumentasi yang lebih kaya, seperti:</p> <ul> <li>Menambahkan ikon/emoji untuk navigasi</li> <li>Menyisipkan contoh kode lebih ringkas atau interaktif</li> <li>Menyediakan tabel fitur atau perbandingan</li> </ul> <p>Apakah ingin lanjut ke file berikutnya (<code>2_modul-lanjutan-es6.md</code> atau yang lain)?</p>"},{"location":"11_modern-js/2_optional-chaining/","title":"2 optional chaining","text":""},{"location":"11_modern-js/2_optional-chaining/#optional-chaining","title":"\ud83d\udcd8 Optional Chaining (<code>?.</code>)","text":"<p>Deskripsi: Optional chaining (<code>?.</code>) adalah fitur modern JavaScript yang diperkenalkan di ES2020, digunakan untuk mengakses properti objek yang dalam tanpa harus memeriksa apakah properti sebelumnya <code>null</code> atau <code>undefined</code>.</p>"},{"location":"11_modern-js/2_optional-chaining/#masalah-umum-sebelum-optional-chaining","title":"\ud83d\udd0d Masalah Umum Sebelum Optional Chaining:","text":"<p>Tanpa optional chaining, kita sering menulis pengecekan berlapis seperti:</p> <pre><code>if (user &amp;&amp; user.address &amp;&amp; user.address.city) {\n  console.log(user.address.city);\n}\n</code></pre>"},{"location":"11_modern-js/2_optional-chaining/#solusi-dengan-optional-chaining","title":"\u2705 Solusi dengan Optional Chaining:","text":"<pre><code>console.log(user?.address?.city);\n</code></pre> <p>Jika salah satu di antaranya <code>null</code> atau <code>undefined</code>, hasilnya otomatis <code>undefined</code> tanpa error.</p>"},{"location":"11_modern-js/2_optional-chaining/#contoh-lain","title":"\ud83e\uddea Contoh Lain:","text":"<pre><code>let data = {\n  profile: {\n    name: 'Marno',\n    contact: {\n      email: 'marno@example.com'\n    }\n  }\n};\n\nconsole.log(data?.profile?.contact?.email); // \u2705 'marno@example.com'\nconsole.log(data?.profile?.address?.city);  // \u2705 undefined, tidak error\n</code></pre>"},{"location":"11_modern-js/2_optional-chaining/#penting-diketahui","title":"\u26a0\ufe0f Penting Diketahui:","text":"<ul> <li>Optional chaining hanya menghentikan akses jika properti sebelumnya nullish (<code>null</code> atau <code>undefined</code>)</li> <li>Tidak mencegah error dari fungsi yang tidak ada, kecuali digunakan seperti:</li> </ul> <pre><code>user?.sayHello?.();\n</code></pre>"},{"location":"11_modern-js/2_optional-chaining/#kapan-digunakan","title":"\ud83d\udccc Kapan Digunakan?","text":"<p>Gunakan optional chaining saat:</p> <ul> <li>Mengakses data API yang bisa saja tidak lengkap</li> <li>Menelusuri properti bersarang dalam objek</li> <li>Menghindari penulisan <code>if</code> bertingkat yang tidak efisien</li> </ul>"},{"location":"11_modern-js/3_top-level-await/","title":"\u23f3 Top-level Await","text":"<p>Sejak ES2022, JavaScript mendukung penggunaan <code>await</code> di level atas modul (top-level), tanpa harus berada dalam fungsi async. Ini memberikan fleksibilitas lebih dalam modul modern (ES Modules / ESM).</p>"},{"location":"11_modern-js/3_top-level-await/#syarat-penggunaan","title":"\u2699\ufe0f Syarat Penggunaan","text":"<p>Top-level <code>await</code> hanya dapat digunakan di dalam ES Modules (ESM). Jadi, file JavaScript kamu harus memiliki <code>\"type\": \"module\"</code> di <code>package.json</code>, atau berekstensi <code>.mjs</code>.</p> <pre><code>// package.json\n{\n  \"type\": \"module\"\n}\n````\n\nAtau:\n\n```bash\nnode --input-type=module\n</code></pre>"},{"location":"11_modern-js/3_top-level-await/#contoh-penggunaan","title":"\ud83d\udce5 Contoh Penggunaan","text":"<pre><code>// fetch-data.js\nconst response = await fetch('https://api.example.com/data');\nconst data = await response.json();\n\nconsole.log(data);\n</code></pre> <p>Tanpa perlu membungkusnya dalam fungsi async!</p>"},{"location":"11_modern-js/3_top-level-await/#dampak-terhadap-modul-lain","title":"\ud83d\udd04 Dampak Terhadap Modul Lain","text":"<p>Karena <code>await</code> bersifat asynchronous, modul lain yang mengimpor file ini harus menunggu hingga <code>await</code> selesai.</p> <pre><code>// main.js\nimport './fetch-data.js'; // Akan menunggu hingga data selesai di-fetch\n</code></pre>"},{"location":"11_modern-js/3_top-level-await/#catatan-penting","title":"\u2757Catatan Penting","text":"<ul> <li>Tidak bisa digunakan dalam script biasa (<code>&lt;script&gt;</code> di HTML) kecuali dengan <code>type=\"module\"</code>.</li> <li>Jika digunakan di CommonJS (<code>require</code>), akan error.</li> </ul>"},{"location":"11_modern-js/3_top-level-await/#kapan-digunakan","title":"\u2705 Kapan Digunakan?","text":"<p>Gunakan top-level await ketika:</p> <ul> <li>Kamu perlu load data sebelum modul siap digunakan.</li> <li>Kamu menulis utilitas modular berbasis async.</li> <li>Kamu menggunakan bundler/modul modern (Vite, ESBuild, Webpack ESM, dll).</li> </ul>"},{"location":"11_modern-js/3_top-level-await/#referensi","title":"\ud83d\udcda Referensi","text":"<ul> <li>MDN Web Docs - Top-level await</li> <li>TC39 Proposal</li> </ul> <pre><code>\n---\n\nSiap lanjut ke materi berikutnya? Mungkin `fetch` atau `API` eksternal?\n</code></pre>"},{"location":"11_modern-js/4_nullish_coalescing/","title":"Nullish Coalescing (<code>??</code>)","text":"<p>description: Memahami operator nullish coalescing (<code>??</code>) di JavaScript untuk menangani nilai <code>null</code> atau <code>undefined</code> dengan cara yang lebih aman dan jelas.</p>"},{"location":"11_modern-js/4_nullish_coalescing/#apa-itu-nullish-coalescing","title":"\u2753 Apa Itu Nullish Coalescing (<code>??</code>)","text":"<p>Nullish coalescing operator (<code>??</code>) adalah fitur JavaScript modern yang digunakan untuk memberikan nilai default jika suatu ekspresi bernilai <code>null</code> atau <code>undefined</code>.</p> <p>\ud83e\udde0 Diperkenalkan di ES2020, operator ini sering digunakan bersamaan dengan optional chaining (<code>?.</code>).</p>"},{"location":"11_modern-js/4_nullish_coalescing/#perbedaan-dengan-operator","title":"\ud83d\udd0d Perbedaan dengan Operator <code>||</code>","text":"<p>Sebelum adanya <code>??</code>, kita sering menggunakan <code>||</code> untuk fallback:</p> <pre><code>let username = input || 'Guest';\n````\n\nNamun `||` akan **menganggap semua falsy value** (seperti `0`, `''`, `false`) sebagai alasan untuk menggunakan default.\n\nContoh:\n\n```javascript\nlet count = 0;\nconsole.log(count || 10); // 10 \u274c (padahal 0 adalah nilai valid)\n</code></pre>"},{"location":"11_modern-js/4_nullish_coalescing/#solusi-dengan","title":"\u2705 Solusi dengan <code>??</code>","text":"<pre><code>let count = 0;\nconsole.log(count ?? 10); // 0 \u2705 (karena count bukan null/undefined)\n</code></pre>"},{"location":"11_modern-js/4_nullish_coalescing/#contoh-penggunaan","title":"\ud83e\uddea Contoh Penggunaan","text":"<pre><code>let userInput;\nlet finalValue = userInput ?? 'Default';\nconsole.log(finalValue); // \"Default\"\n</code></pre> <pre><code>let value = null;\nconsole.log(value ?? 'Fallback'); // \"Fallback\"\n</code></pre> <pre><code>let zero = 0;\nconsole.log(zero ?? 100); // 0 \u2705\n</code></pre>"},{"location":"11_modern-js/4_nullish_coalescing/#hanya-berlaku-untuk-null-dan-undefined","title":"\u26a0\ufe0f Hanya Berlaku untuk <code>null</code> dan <code>undefined</code>","text":"<p>Operator <code>??</code> tidak menganggap <code>''</code>, <code>false</code>, atau <code>0</code> sebagai nullish:</p> Nilai <code>??</code> Akan Gunakan Default? <code>null</code> \u2705 Ya <code>undefined</code> \u2705 Ya <code>false</code> \u274c Tidak <code>0</code> \u274c Tidak <code>''</code> (string kosong) \u274c Tidak"},{"location":"11_modern-js/4_nullish_coalescing/#kombinasi-dengan-optional-chaining","title":"\ud83d\udd04 Kombinasi dengan Optional Chaining","text":"<pre><code>let city = user?.address?.city ?? 'Belum Diatur';\nconsole.log(city);\n</code></pre>"},{"location":"11_modern-js/4_nullish_coalescing/#kapan-digunakan","title":"\ud83d\udccc Kapan Digunakan?","text":"<p>Gunakan <code>??</code> saat:</p> <ul> <li>Ingin memberikan nilai default hanya ketika <code>null</code> atau <code>undefined</code></li> <li>Menghindari fallback yang salah ketika nilai seperti <code>0</code>, <code>false</code>, atau <code>''</code> masih valid</li> </ul>"},{"location":"11_modern-js/4_nullish_coalescing/#catatan-tambahan","title":"\ud83d\udcce Catatan Tambahan","text":"<ul> <li>Jangan mencampur <code>??</code> dengan <code>||</code> atau <code>&amp;&amp;</code> tanpa tanda kurung, karena bisa menimbulkan error parsing:</li> </ul> <pre><code>// \u274c SyntaxError\n// let x = a || b ?? c;\n\n// \u2705 Gunakan tanda kurung\nlet x = (a || b) ?? c;\n</code></pre> <p>\ud83e\udde0 Kesimpulan: Gunakan <code>??</code> ketika kamu ingin memberikan nilai cadangan yang aman dan akurat, hanya saat nilai benar-benar tidak tersedia (<code>null</code> atau <code>undefined</code>).</p> <p>```</p>"},{"location":"12_testing/1_jest/","title":"\ud83e\uddea Pengenalan Jest","text":"<p>Jest adalah framework testing JavaScript yang powerful dan mudah digunakan. Dikembangkan oleh Meta (Facebook), Jest sangat populer dalam pengujian unit dan integrasi, khususnya dalam proyek React \u2014 tetapi juga bisa digunakan untuk aplikasi JavaScript murni (vanilla JS), Node.js, hingga TypeScript.</p>"},{"location":"12_testing/1_jest/#fitur-unggulan-jest","title":"\ud83d\ude80 Fitur Unggulan Jest","text":"<ul> <li>Zero config \u2013 langsung bisa digunakan.</li> <li>Snapshot testing \u2013 untuk menguji struktur output seperti HTML/JSON.</li> <li>Mocking built-in \u2013 mudah membuat mock fungsi/module.</li> <li>Test coverage \u2013 laporan seberapa banyak kode yang diuji.</li> <li>Runs in parallel \u2013 performa cepat dengan worker threads.</li> </ul>"},{"location":"12_testing/1_jest/#instalasi","title":"\ud83d\udce6 Instalasi","text":"<pre><code>npm install --save-dev jest\n````\n\nTambahkan ke `package.json`:\n\n```json\n\"scripts\": {\n  \"test\": \"jest\"\n}\n</code></pre> <p>Untuk proyek <code>type: module</code>, tambahkan opsi:</p> <pre><code>\"type\": \"module\",\n\"jest\": {\n  \"testEnvironment\": \"node\"\n}\n</code></pre>"},{"location":"12_testing/1_jest/#contoh-pengujian-dasar","title":"\ud83e\uddea Contoh Pengujian Dasar","text":"<p>Misal kita punya fungsi:</p> <pre><code>// sum.js\nexport function sum(a, b) {\n  return a + b;\n}\n</code></pre>"},{"location":"12_testing/1_jest/#buat-file-test","title":"Buat file test:","text":"<pre><code>// sum.test.js\nimport { sum } from './sum.js';\n\ntest('menjumlahkan 1 + 2 = 3', () =&gt; {\n  expect(sum(1, 2)).toBe(3);\n});\n</code></pre>"},{"location":"12_testing/1_jest/#jalankan-test","title":"Jalankan test:","text":"<pre><code>npm test\n</code></pre>"},{"location":"12_testing/1_jest/#metode-expect-populer","title":"\ud83d\udd0d Metode Expect Populer","text":"Fungsi Penjelasan <code>toBe()</code> Kecocokan identik (<code>===</code>) <code>toEqual()</code> Untuk objek/array (deep equality) <code>toBeTruthy()</code> Nilai yang dianggap true <code>toBeFalsy()</code> Nilai yang dianggap false <code>toContain()</code> Cek apakah array/string mengandung nilai <code>toThrow()</code> Cek error dilempar atau tidak"},{"location":"12_testing/1_jest/#coverage-test","title":"\ud83e\uddea Coverage Test","text":"<p>Untuk melihat cakupan pengujian:</p> <pre><code>npx jest --coverage\n</code></pre> <p>Akan muncul laporan detail berapa persen kode yang diuji.</p>"},{"location":"12_testing/1_jest/#struktur-proyek-rekomendasi","title":"\ud83d\udcc1 Struktur Proyek Rekomendasi","text":"<pre><code>/project-root\n  \u251c\u2500\u2500 src/\n  \u2502   \u2514\u2500\u2500 sum.js\n  \u251c\u2500\u2500 tests/\n  \u2502   \u2514\u2500\u2500 sum.test.js\n  \u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"12_testing/1_jest/#referensi-resmi","title":"\ud83d\udd17 Referensi Resmi","text":"<ul> <li>Jest Docs</li> <li>Awesome Jest</li> </ul> <p>```</p>"},{"location":"1_pendahuluan/1_apa-itu-javascript/","title":"\ud83d\udfe8 Apa Itu JavaScript?","text":"<p>JavaScript adalah bahasa pemrograman tingkat tinggi, dinamis, dan berorientasi objek yang terutama digunakan untuk membuat halaman web menjadi interaktif. Bersama dengan HTML dan CSS, JavaScript adalah pilar utama dari pengembangan web modern.</p>"},{"location":"1_pendahuluan/1_apa-itu-javascript/#pengertian-singkat","title":"\ud83d\udd0d Pengertian Singkat","text":"<p>JavaScript memungkinkan pengembang untuk:</p> <ul> <li>Membuat elemen interaktif seperti tombol, form, slider, popup.</li> <li>Mengubah isi halaman web secara real-time tanpa reload.</li> <li>Berkomunikasi dengan server menggunakan AJAX dan Fetch API.</li> <li>Membuat aplikasi frontend dan backend (dengan Node.js).</li> </ul>"},{"location":"1_pendahuluan/1_apa-itu-javascript/#karakteristik-javascript","title":"\ud83e\uddec Karakteristik JavaScript","text":"Karakteristik Keterangan Interpreted Dieksekusi langsung di browser, tanpa perlu dikompilasi Dynamic Typing Tidak perlu mendeklarasikan tipe data secara eksplisit Multi-Paradigm Mendukung gaya imperatif, OOP, dan fungsional Asynchronous Bisa menjalankan proses non-blok dengan callback, promise, atau async/await Cross Platform Berjalan di berbagai perangkat dan sistem operasi"},{"location":"1_pendahuluan/1_apa-itu-javascript/#di-mana-javascript-digunakan","title":"\ud83c\udf10 Di Mana JavaScript Digunakan?","text":"<ul> <li>Web Frontend: Menghidupkan antarmuka pengguna.</li> <li>Backend: Melalui Node.js untuk server-side logic.</li> <li>Mobile App: Dengan framework seperti React Native.</li> <li>Desktop App: Dengan Electron (seperti aplikasi VS Code).</li> <li>Game Development: Menggunakan Phaser, Babylon.js, dll.</li> <li>IoT &amp; Robotics: Misalnya Johnny-Five.</li> </ul>"},{"location":"1_pendahuluan/1_apa-itu-javascript/#sejarah-singkat","title":"\ud83d\uddd3 Sejarah Singkat","text":"<ul> <li>1995: Diciptakan oleh Brendan Eich dalam 10 hari di Netscape.</li> <li>1997: Distandardisasi oleh ECMA sebagai ECMAScript (ES1).</li> <li>2009: Node.js lahir, membawa JavaScript ke dunia backend.</li> <li>2015: Rilis ES6 membawa perubahan besar: <code>let</code>, <code>const</code>, arrow function, module, dan lainnya.</li> <li>Sekarang: JavaScript mendominasi dunia pemrograman web dan terus berkembang pesat.</li> </ul>"},{"location":"1_pendahuluan/1_apa-itu-javascript/#kenapa-harus-belajar-javascript","title":"\ud83e\udde0 Kenapa Harus Belajar JavaScript?","text":"<ul> <li>\ud83d\udcc8 Peluang Karier Tinggi: Salah satu skill yang paling banyak dicari.</li> <li>\ud83c\udf10 Dominasi Web: Hampir semua web menggunakan JavaScript.</li> <li>\ud83d\udd01 Belajar Sekali, Pakai di Mana Saja: Browser, backend, mobile, desktop.</li> <li>\ud83d\ude80 Komunitas dan Ekosistem Luas: Ribuan library &amp; framework tersedia.</li> </ul> <p>JavaScript bukan hanya bahasa pemrograman\u2014ia adalah jantung dari web modern.</p>"},{"location":"1_pendahuluan/2_sejarah-javascript/","title":"\ud83d\udcdc Sejarah Singkat JavaScript","text":"<p>Dari proyek iseng dalam 10 hari menjadi bahasa pemrograman paling berpengaruh di web. Inilah kisah singkat JavaScript.</p>"},{"location":"1_pendahuluan/2_sejarah-javascript/#1995-lahirnya-javascript","title":"\ud83e\uddea 1995: Lahirnya JavaScript","text":"<p>Pada tahun 1995, Brendan Eich, seorang programmer di Netscape, ditugaskan untuk membuat bahasa skrip yang dapat berjalan di dalam browser. Hanya dalam 10 hari, ia menciptakan bahasa baru yang awalnya dinamai Mocha, kemudian LiveScript, dan akhirnya dikenal sebagai JavaScript.</p> <p>\ud83d\udccc Fun Fact: Nama \"JavaScript\" dipilih karena \"Java\" sedang populer saat itu\u2014bukan karena JavaScript adalah turunan dari Java. Faktanya, keduanya sangat berbeda!</p>"},{"location":"1_pendahuluan/2_sejarah-javascript/#19961999-standarisasi-dan-ecmascript","title":"\ud83d\udee0 1996\u20131999: Standarisasi dan ECMAScript","text":"<ul> <li>Netscape menyerahkan spesifikasi JavaScript ke organisasi ECMA International.</li> <li>Tahun 1997, standar resmi pertama JavaScript muncul: ECMAScript 1 (ES1).</li> <li>Kemudian muncul ES2 (1998) dan ES3 (1999) yang memperkuat fondasi sintaks JavaScript.</li> </ul>"},{"location":"1_pendahuluan/2_sejarah-javascript/#20002008-masa-stagnasi","title":"\ud83e\uddca 2000\u20132008: Masa Stagnasi","text":"<ul> <li>JavaScript stagnan karena browser war (Internet Explorer vs Netscape).</li> <li>Versi ECMAScript 4 gagal disepakati karena terlalu ambisius.</li> <li>JavaScript dianggap lambat dan berantakan, hanya dipakai untuk efek sederhana.</li> </ul> <p>Namun di balik layar, komunitas mulai mempersiapkan kebangkitan...</p>"},{"location":"1_pendahuluan/2_sejarah-javascript/#2009-kebangkitan-melalui-nodejs","title":"\ud83d\udd25 2009: Kebangkitan Melalui Node.js","text":"<ul> <li>Ryan Dahl merilis Node.js, platform yang memungkinkan JavaScript berjalan di luar browser\u2014di sisi server.</li> <li>Ini adalah game changer: JavaScript tidak lagi terbatas pada halaman web.</li> </ul>"},{"location":"1_pendahuluan/2_sejarah-javascript/#2015-lompatan-besar-dengan-es6","title":"\u26a1 2015: Lompatan Besar dengan ES6","text":"<p>Setelah lama diam, ECMAScript 6 (juga disebut ES2015) dirilis. Versi ini membawa perubahan besar:</p> <ul> <li><code>let</code> dan <code>const</code></li> <li>Arrow function (<code>=&gt;</code>)</li> <li>Class, Module (<code>import/export</code>)</li> <li>Promise, template literal, dan lainnya</li> </ul> <p>JavaScript menjadi lebih modern, efisien, dan readable.</p>"},{"location":"1_pendahuluan/2_sejarah-javascript/#2016sekarang-javascript-modern","title":"\ud83e\ude84 2016\u2013Sekarang: JavaScript Modern","text":"<p>Sejak ES6, ECMAScript dirilis setiap tahun:</p> Tahun Versi Fitur Penting 2016 ES7 <code>Array.prototype.includes</code>, <code>**</code> 2017 ES8 Async/Await, Object.entries/values 2018 ES9 Rest/Spread di object, Promise.finally 2019 ES10 <code>flat()</code>, <code>trimStart()</code>, optional catch 2020+ ES11\u2013ES13 Nullish Coalescing, Optional Chaining, Top-Level Await, dll"},{"location":"1_pendahuluan/2_sejarah-javascript/#javascript-di-era-modern","title":"\ud83e\uddec JavaScript di Era Modern","text":"<ul> <li>Frontend: React, Vue, Angular</li> <li>Backend: Node.js, Express</li> <li>Mobile: React Native, Ionic</li> <li>Desktop: Electron</li> <li>Fullstack: Next.js, Nuxt.js</li> <li>AI/ML: TensorFlow.js</li> </ul> <p>JavaScript bukan hanya hidup \u2014 ia mendominasi ekosistem pengembangan aplikasi modern.</p>"},{"location":"1_pendahuluan/2_sejarah-javascript/#penutup","title":"\u2728 Penutup","text":"<p>Dari bahasa skrip untuk browser Netscape hingga mesin utama di balik web, JavaScript telah tumbuh luar biasa. Ia bukan hanya bahasa, tapi juga simbol evolusi teknologi web.</p> <p>\u201cJavaScript akan tetap relevan selama internet masih ada.\u201d \u2014 Pengembang Web Modern</p>"},{"location":"2_dasar/1_hello-world/","title":"\ud83d\udc4b Hello, World!","text":"<p>Mari kita mulai perjalanan kita dalam dunia JavaScript dengan sesuatu yang klasik: mencetak Hello, World! ke layar.</p>"},{"location":"2_dasar/1_hello-world/#tujuan","title":"\ud83d\udccc Tujuan","text":"<ul> <li>Memahami cara menjalankan kode JavaScript</li> <li>Mengenal console dan cara interaksi dengan output</li> <li>Menjalankan JavaScript di browser dan juga Node.js</li> </ul>"},{"location":"2_dasar/1_hello-world/#menjalankan-javascript-di-browser","title":"\ud83d\udda5 Menjalankan JavaScript di Browser","text":"<p>Buka browser favoritmu (Chrome, Firefox, Edge), lalu tekan <code>F12</code> untuk membuka Developer Tools, lalu pilih tab Console.</p> <p>Ketikkan kode berikut:</p> <pre><code>console.log(\"Hello, World!\");\n````\n\nLalu tekan `Enter`.\n\n&gt; \ud83d\udca1 `console.log()` adalah cara paling umum untuk menampilkan output di JavaScript.\n\n---\n\n## \ud83c\udf10 Menyisipkan JavaScript di HTML\n\nBuat file HTML seperti berikut:\n\n```html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"id\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Hello JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Belajar JavaScript&lt;/h1&gt;\n\n  &lt;script&gt;\n    console.log(\"Hello dari file HTML!\");\n    alert(\"Halo Dunia!\");\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Saat file dibuka di browser, kamu akan melihat:</p> <ul> <li>Pesan pop-up dari <code>alert()</code></li> <li>Output <code>console.log()</code> muncul di console (Developer Tools)</li> </ul>"},{"location":"2_dasar/1_hello-world/#menjalankan-javascript-di-nodejs","title":"\u2699\ufe0f Menjalankan JavaScript di Node.js","text":"<p>Jika kamu menggunakan Node.js, simpan kode berikut di file <code>hello.js</code>:</p> <pre><code>console.log(\"Hello dari Node.js!\");\n</code></pre> <p>Lalu jalankan di terminal:</p> <pre><code>node hello.js\n</code></pre> <p>Output:</p> <pre><code>Hello dari Node.js!\n</code></pre>"},{"location":"2_dasar/1_hello-world/#catatan","title":"\ud83e\udde0 Catatan","text":"Fungsi Keterangan <code>console.log()</code> Menampilkan teks ke console (debugging) <code>alert()</code> Menampilkan pesan pop-up (khusus browser) <code>document.write()</code> Menulis langsung ke halaman HTML (tidak disarankan)"},{"location":"2_dasar/1_hello-world/#tantangan-cepat","title":"\ud83e\uddea Tantangan Cepat","text":"<ol> <li>Tampilkan nama kamu dengan <code>console.log()</code></li> <li>Tampilkan dua kalimat dalam satu output</li> <li>Tampilkan angka, boolean, dan string</li> </ol> <pre><code>console.log(\"Nama saya Marno\");\nconsole.log(\"Saya belajar JavaScript dengan semangat!\");\nconsole.log(123, true, \"Belajar itu menyenangkan\");\n</code></pre> <p>Perjalanan seribu baris kode dimulai dari satu <code>console.log</code>.</p> <p>Selanjutnya, kita akan belajar tentang variabel dan bagaimana cara menyimpan data dalam JavaScript.</p>"},{"location":"2_dasar/2_variabel/","title":"\ud83d\udcbe Variabel di JavaScript","text":"<p>Variabel adalah wadah untuk menyimpan data dalam program. Dalam JavaScript, kita dapat menyimpan teks, angka, boolean, objek, dan masih banyak lagi ke dalam sebuah variabel.</p>"},{"location":"2_dasar/2_variabel/#deklarasi-variabel","title":"\ud83c\udff7\ufe0f Deklarasi Variabel","text":"<p>JavaScript menyediakan tiga cara untuk mendeklarasikan variabel:</p> <pre><code>var nama = \"Marno\";\nlet usia = 21;\nconst negara = \"Indonesia\";\n````\n\n| Kata Kunci | Bisa Diubah Nilainya? | Lingkup (Scope) | Direkomendasikan |\n| ---------- | --------------------- | --------------- | ---------------- |\n| `var`      | Ya                    | Function scope  | \u274c Tidak          |\n| `let`      | Ya                    | Block scope     | \u2705 Ya             |\n| `const`    | Tidak (konstan)       | Block scope     | \u2705 Ya             |\n\n&gt; \u26a0\ufe0f Hindari `var` karena dapat menyebabkan bug tak terduga akibat hoisting dan scope yang longgar.\n\n---\n\n## \ud83d\udce6 Contoh Penggunaan\n\n```javascript\nlet nama = \"Marno\";\nconst umur = 22;\n\nconsole.log(\"Halo, nama saya \" + nama + \" dan umur saya \" + umur + \" tahun.\");\n</code></pre>"},{"location":"2_dasar/2_variabel/#aturan-penamaan-variabel","title":"\ud83d\udcda Aturan Penamaan Variabel","text":"<ul> <li>Gunakan huruf, angka, underscore <code>_</code>, atau dolar <code>$</code>.</li> <li>Tidak boleh diawali dengan angka.</li> <li>Case-sensitive: <code>Nama</code> dan <code>nama</code> dianggap berbeda.</li> <li>Gunakan camelCase untuk penulisan yang baik:</li> </ul> <p><code>javascript   let totalHarga;   let jumlahBarang;</code></p>"},{"location":"2_dasar/2_variabel/#mengubah-nilai-variabel","title":"\ud83d\udd01 Mengubah Nilai Variabel","text":"<pre><code>let kota = \"Kuching\";\nkota = \"Miri\";  // OK\n\nconst negara = \"Malaysia\";\nnegara = \"Indonesia\"; // \u274c Error! const tidak bisa diubah\n</code></pre>"},{"location":"2_dasar/2_variabel/#hoisting","title":"\ud83e\udde0 Hoisting","text":"<p><code>var</code> akan diangkat ke atas (hoisted) dan dapat digunakan sebelum dideklarasikan, tapi nilainya <code>undefined</code>:</p> <pre><code>console.log(nama); // undefined\nvar nama = \"Rina\";\n</code></pre> <p>Sedangkan <code>let</code> dan <code>const</code> tidak bisa digunakan sebelum dideklarasikan:</p> <pre><code>console.log(nama); // \u274c ReferenceError\nlet nama = \"Rina\";\n</code></pre>"},{"location":"2_dasar/2_variabel/#tantangan-cepat","title":"\ud83e\uddea Tantangan Cepat","text":"<ol> <li>Buat variabel <code>produk</code>, <code>harga</code>, dan <code>stok</code>.</li> <li>Cetak kalimat: <code>\"Produk: Apel, Harga: 5000, Stok: 20\"</code></li> </ol> <pre><code>let produk = \"Apel\";\nlet harga = 5000;\nlet stok = 20;\n\nconsole.log(\"Produk: \" + produk + \", Harga: \" + harga + \", Stok: \" + stok);\n</code></pre> <p>\u201cVariabel adalah bahasa manusia yang dimengerti oleh komputer.\u201d</p> <p>Selanjutnya: Mari kita pelajari jenis tipe data yang bisa disimpan ke dalam variabel.</p>"},{"location":"2_dasar/3_tipe-data/","title":"\ud83e\uddec Tipe Data di JavaScript","text":"<p>JavaScript adalah bahasa yang dinamis, artinya tipe data variabel bisa berubah tergantung nilainya. Di awal belajar, penting untuk mengenali tipe-tipe data primitif dan non-primitif (referensi).</p>"},{"location":"2_dasar/3_tipe-data/#tipe-data-primitif","title":"\ud83e\uddea Tipe Data Primitif","text":"<p>Tipe data primitif adalah data yang tidak bisa dipecah lagi. Mereka disimpan langsung di memori.</p> Tipe Contoh <code>string</code> <code>\"Halo Dunia\"</code> <code>number</code> <code>42</code>, <code>3.14</code> <code>boolean</code> <code>true</code>, <code>false</code> <code>undefined</code> variabel belum diisi <code>null</code> tidak ada nilai <code>symbol</code> simbol unik (jarang dipakai) <code>bigint</code> angka besar (ES2020+) <pre><code>let nama = \"Marno\";         // string\nlet umur = 21;              // number\nlet aktif = true;           // boolean\nlet pekerjaan;              // undefined\nlet kosong = null;          // null\n````\n\n&gt; \ud83e\udde0 `typeof null` akan menghasilkan `\"object\"` \u2014 ini adalah bug historis di JavaScript.\n\n---\n\n## \ud83d\udd22 Number\n\nSemua angka di JavaScript, baik bilangan bulat maupun desimal, masuk ke dalam tipe `number`.\n\n```javascript\nlet x = 10;\nlet y = 3.14;\nlet total = x + y;\n</code></pre> <p>\ud83d\udca1 Tidak ada <code>int</code> atau <code>float</code> di JavaScript. Semua disebut <code>number</code>.</p>"},{"location":"2_dasar/3_tipe-data/#string","title":"\ud83d\udcdb String","text":"<p>String adalah teks yang dibungkus dengan tanda kutip <code>' '</code>, <code>\" \"</code>, atau <code>` `</code> (backtick).</p> <pre><code>let nama = \"Marno\";\nlet salam = `Halo, ${nama}!`; // Template literal\n</code></pre>"},{"location":"2_dasar/3_tipe-data/#boolean","title":"\ud83e\udded Boolean","text":"<p>Digunakan untuk menyatakan benar (<code>true</code>) atau salah (<code>false</code>):</p> <pre><code>let sudahBayar = true;\nlet masihAktif = false;\n</code></pre>"},{"location":"2_dasar/3_tipe-data/#null-vs-undefined","title":"\ud83d\udd73 Null vs Undefined","text":"<pre><code>let kosong = null;      // Disengaja kosong\nlet belumIsi;           // Undefined secara default\n</code></pre>"},{"location":"2_dasar/3_tipe-data/#bigint-es2020","title":"\ud83e\uddee BigInt (ES2020+)","text":"<p>Untuk angka sangat besar melebihi batas <code>Number.MAX_SAFE_INTEGER</code>:</p> <pre><code>let big = 1234567890123456789012345678901234567890n;\n</code></pre> <p>BigInt tidak bisa dicampur langsung dengan <code>number</code> biasa.</p>"},{"location":"2_dasar/3_tipe-data/#tipe-data-referensi-non-primitif","title":"\ud83d\udd30 Tipe Data Referensi (Non-Primitif)","text":"<p>Selain tipe data primitif, JavaScript punya tipe data kompleks seperti:</p> <ul> <li>Object: Struktur data berbentuk pasangan <code>key-value</code>.</li> <li>Array: Kumpulan nilai dalam urutan.</li> <li>Function: Juga dianggap objek di JavaScript.</li> </ul> <pre><code>let orang = {\n  nama: \"Marno\",\n  umur: 22\n};\n\nlet hobi = [\"ngoding\", \"ngopi\", \"ngonten\"];\n</code></pre>"},{"location":"2_dasar/3_tipe-data/#typeof-operator","title":"\ud83d\udd0d typeof Operator","text":"<p>Gunakan <code>typeof</code> untuk mengecek tipe data:</p> <pre><code>typeof \"Halo\"      // string\ntypeof 42          // number\ntypeof true        // boolean\ntypeof undefined   // undefined\ntypeof null        // object (bug bawaan!)\ntypeof {}          // object\ntypeof []          // object\ntypeof function(){} // function\n</code></pre>"},{"location":"2_dasar/3_tipe-data/#tantangan-cepat","title":"\ud83e\uddea Tantangan Cepat","text":"<ol> <li>Buat variabel: <code>nama</code>, <code>umur</code>, <code>menikah</code>, <code>anak</code>, <code>tinggi</code>.</li> <li>Gunakan <code>typeof</code> untuk mengecek tipe datanya.</li> </ol> <pre><code>let nama = \"Budi\";\nlet umur = 30;\nlet menikah = false;\nlet anak = null;\nlet tinggi;\n\nconsole.log(typeof nama);     // string\nconsole.log(typeof umur);     // number\nconsole.log(typeof menikah);  // boolean\nconsole.log(typeof anak);     // object\nconsole.log(typeof tinggi);   // undefined\n</code></pre> <p>\u201cTipe data adalah bentuk wujud dari informasi yang kita kelola.\u201d</p> <p>Selanjutnya: Mari kita bahas tentang operator \u2014 alat utama untuk memproses data!</p>"},{"location":"2_dasar/4_kontrol/","title":"Struktur Kontrol dalam JavaScript","text":"<p>Struktur kontrol adalah dasar dalam membentuk alur program. JavaScript menyediakan berbagai macam struktur kontrol untuk membantu kita membuat keputusan dan mengulang perintah sesuai kondisi tertentu.</p>"},{"location":"2_dasar/4_kontrol/#1-pernyataan-kondisional-conditional-statements","title":"1. Pernyataan Kondisional (Conditional Statements)","text":""},{"location":"2_dasar/4_kontrol/#if-else-if-dan-else","title":"<code>if</code>, <code>else if</code>, dan <code>else</code>","text":"<pre><code>let nilai = 85;\n\nif (nilai &gt;= 90) {\n  console.log(\"A\");\n} else if (nilai &gt;= 80) {\n  console.log(\"B\");\n} else {\n  console.log(\"C\");\n}\n````\n\n### `switch`\n\n```javascript\nlet hari = \"Senin\";\n\nswitch (hari) {\n  case \"Senin\":\n    console.log(\"Hari kerja\");\n    break;\n  case \"Sabtu\":\n  case \"Minggu\":\n    console.log(\"Hari libur\");\n    break;\n  default:\n    console.log(\"Hari tidak valid\");\n}\n</code></pre>"},{"location":"2_dasar/4_kontrol/#2-perulangan-loops","title":"2. Perulangan (Loops)","text":""},{"location":"2_dasar/4_kontrol/#for","title":"<code>for</code>","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(`Iterasi ke-${i}`);\n}\n</code></pre>"},{"location":"2_dasar/4_kontrol/#while","title":"<code>while</code>","text":"<pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"2_dasar/4_kontrol/#dowhile","title":"<code>do...while</code>","text":"<pre><code>let i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"2_dasar/4_kontrol/#3-break-dan-continue","title":"3. <code>break</code> dan <code>continue</code>","text":"<pre><code>for (let i = 0; i &lt; 10; i++) {\n  if (i === 3) continue; // lewati angka 3\n  if (i === 7) break;    // hentikan loop saat i = 7\n  console.log(i);\n}\n</code></pre> <p>Struktur kontrol membentuk pondasi dalam menciptakan logika program yang fleksibel dan cerdas.</p>"},{"location":"2_dasar/5_operator/","title":"\u2699\ufe0f Operator dalam JavaScript","text":"<p>Operator adalah simbol atau keyword yang digunakan untuk melakukan operasi terhadap satu atau lebih nilai (operand). Mulai dari penjumlahan hingga logika kompleks \u2014 semua bisa dilakukan dengan operator.</p>"},{"location":"2_dasar/5_operator/#operator-aritmatika","title":"\u2795 Operator Aritmatika","text":"<p>Digunakan untuk perhitungan matematis:</p> Operator Fungsi Contoh <code>+</code> Penjumlahan <code>5 + 3</code> \u2192 <code>8</code> <code>-</code> Pengurangan <code>10 - 4</code> \u2192 <code>6</code> <code>*</code> Perkalian <code>2 * 3</code> \u2192 <code>6</code> <code>/</code> Pembagian <code>10 / 2</code> \u2192 <code>5</code> <code>%</code> Modulus (sisa) <code>7 % 3</code> \u2192 <code>1</code> <code>**</code> Pangkat (ES6) <code>2 ** 3</code> \u2192 <code>8</code> <pre><code>let a = 10;\nlet b = 3;\nconsole.log(a + b); // 13\nconsole.log(a % b); // 1\n````\n\n---\n\n## \ud83d\udff0 Operator Penugasan (Assignment)\n\nDigunakan untuk menetapkan nilai ke variabel:\n\n| Operator | Contoh   | Sama dengan |\n| -------- | -------- | ----------- |\n| `=`      | `x = 10` | `10`        |\n| `+=`     | `x += 5` | `x = x + 5` |\n| `-=`     | `x -= 3` | `x = x - 3` |\n| `*=`     | `x *= 2` | `x = x * 2` |\n| `/=`     | `x /= 4` | `x = x / 4` |\n| `%=`     | `x %= 2` | `x = x % 2` |\n\n---\n\n## \ud83d\udd01 Operator Perbandingan\n\nDigunakan untuk membandingkan dua nilai dan mengembalikan nilai boolean (`true` atau `false`).\n\n| Operator | Fungsi                  | Contoh                |\n| -------- | ----------------------- | --------------------- |\n| `==`     | Sama nilai (tanpa tipe) | `\"5\" == 5` \u2192 `true`   |\n| `===`    | Sama nilai &amp; tipe       | `\"5\" === 5` \u2192 `false` |\n| `!=`     | Tidak sama (tanpa tipe) | `\"5\" != 5` \u2192 `false`  |\n| `!==`    | Tidak sama nilai/tipe   | `\"5\" !== 5` \u2192 `true`  |\n| `&gt;`      | Lebih besar             | `7 &gt; 5` \u2192 `true`      |\n| `&lt;`      | Lebih kecil             | `3 &lt; 2` \u2192 `false`     |\n| `&gt;=`     | Lebih besar atau sama   | `4 &gt;= 4` \u2192 `true`     |\n| `&lt;=`     | Lebih kecil atau sama   | `6 &lt;= 5` \u2192 `false`    |\n\n---\n\n## \ud83e\udde0 Perbedaan `==` vs `===`\n\n```javascript\nconsole.log(\"5\" == 5);  // true (tipe diabaikan)\nconsole.log(\"5\" === 5); // false (tipe diperiksa)\n</code></pre> <p>Gunakan <code>===</code> dan <code>!==</code> untuk perbandingan yang lebih aman (strict equality).</p>"},{"location":"2_dasar/5_operator/#operator-logika","title":"\u26a1 Operator Logika","text":"<p>Digunakan untuk ekspresi boolean kompleks:</p> Operator Nama Contoh <code>&amp;&amp;</code> AND <code>true &amp;&amp; false</code> \u2192 <code>false</code> ` ` OR `true false<code>\u2192</code>true` <code>!</code> NOT <code>!true</code> \u2192 <code>false</code> <pre><code>let isOnline = true;\nlet isLogin = false;\n\nconsole.log(isOnline &amp;&amp; isLogin); // false\nconsole.log(isOnline || isLogin); // true\nconsole.log(!isOnline);           // false\n</code></pre>"},{"location":"2_dasar/5_operator/#operator-increment-decrement","title":"\ud83d\udd04 Operator Increment &amp; Decrement","text":"<p>Digunakan untuk menambah atau mengurangi nilai 1.</p> <pre><code>let x = 5;\n\nx++; // x = x + 1\n--x; // x = x - 1\n</code></pre> <p>\ud83d\udca1 <code>x++</code> (post-increment) vs <code>++x</code> (pre-increment): hasilnya sama tapi timing evaluasi berbeda.</p>"},{"location":"2_dasar/5_operator/#operator-ternary","title":"\u2753 Operator Ternary","text":"<p>Operator pendek untuk <code>if else</code>.</p> <pre><code>let umur = 18;\nlet status = umur &gt;= 17 ? \"Dewasa\" : \"Anak-anak\";\nconsole.log(status); // Dewasa\n</code></pre>"},{"location":"2_dasar/5_operator/#tantangan-cepat","title":"\ud83e\uddea Tantangan Cepat","text":"<ol> <li>Hitung sisa bagi dari 17 dibagi 4</li> <li>Cek apakah angka <code>8</code> lebih besar dari <code>5</code> dan kurang dari <code>10</code></li> <li>Gunakan ternary untuk mengecek apakah nilai <code>nilai = 75</code> lulus atau tidak</li> </ol> <pre><code>let sisa = 17 % 4;\nlet cek = 8 &gt; 5 &amp;&amp; 8 &lt; 10;\nlet nilai = 75;\nlet status = nilai &gt;= 70 ? \"Lulus\" : \"Gagal\";\n</code></pre> <p>\u201cOperator adalah jembatan logika antara niat kita dan hasil program.\u201d</p> <p>Selanjutnya: Kita akan bahas struktur kontrol seperti <code>if</code>, <code>else</code>, <code>switch</code>, dan <code>loop</code>.</p>"},{"location":"3_fungsi/1_fungsi-dasar/","title":"Fungsi Dasar dalam JavaScript","text":"<p>Fungsi (function) adalah blok kode yang dirancang untuk menjalankan tugas tertentu. Fungsi memungkinkan kita untuk menulis kode yang dapat digunakan kembali, modular, dan lebih mudah dipelihara.</p>"},{"location":"3_fungsi/1_fungsi-dasar/#1-deklarasi-fungsi","title":"1. Deklarasi Fungsi","text":""},{"location":"3_fungsi/1_fungsi-dasar/#sintaks-dasar","title":"Sintaks Dasar","text":"<pre><code>function sapa() {\n  console.log(\"Halo, dunia!\");\n}\n\nsapa(); // Output: Halo, dunia!\n````\n\n## 2. Fungsi dengan Parameter\n\n```javascript\nfunction sapa(nama) {\n  console.log(`Halo, ${nama}!`);\n}\n\nsapa(\"Marno\"); // Output: Halo, Marno!\n</code></pre>"},{"location":"3_fungsi/1_fungsi-dasar/#3-fungsi-dengan-return-value","title":"3. Fungsi dengan Return Value","text":"<pre><code>function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(3, 5);\nconsole.log(hasil); // Output: 8\n</code></pre>"},{"location":"3_fungsi/1_fungsi-dasar/#4-function-expression","title":"4. Function Expression","text":"<pre><code>const kali = function(x, y) {\n  return x * y;\n};\n\nconsole.log(kali(4, 5)); // Output: 20\n</code></pre>"},{"location":"3_fungsi/1_fungsi-dasar/#5-arrow-function-es6","title":"5. Arrow Function (ES6)","text":"<pre><code>const bagi = (a, b) =&gt; a / b;\n\nconsole.log(bagi(10, 2)); // Output: 5\n</code></pre>"},{"location":"3_fungsi/1_fungsi-dasar/#catatan","title":"Catatan:","text":"<ul> <li>Function Declaration dikenali oleh JavaScript sebelum eksekusi (hoisting).</li> <li>Function Expression dan Arrow Function tidak dikenali sebelum baris eksekusi.</li> </ul> <p>Fungsi adalah jiwa dari modularitas dalam pemrograman. Menulislah seperti pujangga, panggillah seperti maestro.</p>"},{"location":"3_fungsi/2_scope-hoisting/","title":"Scope dan Hoisting dalam JavaScript","text":"<p>Memahami bagaimana scope dan hoisting bekerja adalah kunci menulis kode JavaScript yang bersih dan bebas bug.</p>"},{"location":"3_fungsi/2_scope-hoisting/#1-apa-itu-scope","title":"1. Apa Itu Scope?","text":"<p>Scope adalah konteks di mana variabel didefinisikan dan diakses. Ada dua jenis utama:</p>"},{"location":"3_fungsi/2_scope-hoisting/#a-global-scope","title":"a. Global Scope","text":"<p>Variabel yang dideklarasikan di luar fungsi memiliki cakupan global.</p> <pre><code>let nama = \"Marno\";\n\nfunction tampilkanNama() {\n  console.log(nama); // Bisa diakses karena berada di scope global\n}\n````\n\n### b. Function / Local Scope\n\nVariabel yang dideklarasikan di dalam fungsi hanya bisa diakses dalam fungsi itu.\n\n```javascript\nfunction halo() {\n  let pesan = \"Selamat datang!\";\n  console.log(pesan);\n}\n\nconsole.log(pesan); // \u274c Error: pesan is not defined\n</code></pre>"},{"location":"3_fungsi/2_scope-hoisting/#2-block-scope-let-dan-const","title":"2. Block Scope (<code>let</code> dan <code>const</code>)","text":"<p><code>let</code> dan <code>const</code> hanya berlaku di dalam blok ({}), tidak seperti <code>var</code>.</p> <pre><code>{\n  let x = 10;\n  const y = 20;\n}\n\nconsole.log(x); // \u274c Error\n</code></pre>"},{"location":"3_fungsi/2_scope-hoisting/#3-hoisting","title":"3. Hoisting","text":"<p>Hoisting adalah perilaku JavaScript yang \"mengangkat\" deklarasi variabel dan fungsi ke bagian atas scope-nya sebelum kode dijalankan.</p>"},{"location":"3_fungsi/2_scope-hoisting/#a-hoisting-dengan-var","title":"a. Hoisting dengan <code>var</code>","text":"<pre><code>console.log(nama); // Output: undefined\nvar nama = \"Andi\";\n</code></pre> <p>Variabel <code>nama</code> di-\"hoist\", tetapi nilainya <code>undefined</code> sampai baris penugasan dijalankan.</p>"},{"location":"3_fungsi/2_scope-hoisting/#b-tidak-hoisting-dengan-let-dan-const","title":"b. Tidak Hoisting dengan <code>let</code> dan <code>const</code>","text":"<pre><code>console.log(nama); // \u274c Error: Cannot access 'nama' before initialization\nlet nama = \"Budi\";\n</code></pre>"},{"location":"3_fungsi/2_scope-hoisting/#4-hoisting-pada-fungsi","title":"4. Hoisting pada Fungsi","text":""},{"location":"3_fungsi/2_scope-hoisting/#function-declaration","title":"Function Declaration","text":"<pre><code>sayHi(); // Output: Halo!\n\nfunction sayHi() {\n  console.log(\"Halo!\");\n}\n</code></pre>"},{"location":"3_fungsi/2_scope-hoisting/#function-expression","title":"Function Expression","text":"<pre><code>sayHi(); // \u274c Error: sayHi is not a function\n\nconst sayHi = function() {\n  console.log(\"Halo!\");\n};\n</code></pre> <p>Dalam dunia JavaScript, variabel bisa muncul sebelum waktunya\u2014itulah hoisting. Namun, jangan terlena. Disiplin deklarasi tetap yang utama.</p>"},{"location":"3_fungsi/3_closure/","title":"Closure di JavaScript","text":"<p>Closure adalah kombinasi antara fungsi dan lingkungan leksikal (lexical environment) di mana fungsi tersebut didefinisikan. Closure memungkinkan fungsi mengakses variabel dari luar cakupannya (scope) meskipun fungsi tersebut dieksekusi di luar scope aslinya.</p>"},{"location":"3_fungsi/3_closure/#mengapa-closure-penting","title":"Mengapa Closure Penting?","text":"<p>Closure memungkinkan: - Data tetap privat (encapsulation). - Pembuatan fungsi dengan konfigurasi khusus (partial application). - Penggunaan fungsi sebagai penghasil fungsi lainnya (function factory).</p>"},{"location":"3_fungsi/3_closure/#contoh-closure","title":"Contoh Closure","text":"<p>```javascript function pembuatPenghitung() {   let hitung = 0;   return function () {     hitung++;     return hitung;   }; }</p> <p>const tambah = pembuatPenghitung();</p> <p>console.log(tambah()); // 1 console.log(tambah()); // 2 console.log(tambah()); // 3 ````</p> <p>Pada contoh di atas:</p> <ul> <li><code>hitung</code> adalah variabel lokal dari <code>pembuatPenghitung</code>.</li> <li>Fungsi anonim yang dikembalikan tetap dapat mengakses <code>hitung</code> karena merupakan closure.</li> </ul>"},{"location":"3_fungsi/3_closure/#keunggulan-closure","title":"Keunggulan Closure","text":"<ul> <li>Privasi: Variabel di dalam closure tidak dapat diakses langsung dari luar.</li> <li>Kontrol State: Berguna dalam callback dan asynchronous programming.</li> <li>Modularisasi: Closure dapat digunakan untuk membuat module pattern.</li> </ul>"},{"location":"3_fungsi/3_closure/#kapan-menggunakan-closure","title":"Kapan Menggunakan Closure?","text":"<ul> <li>Saat ingin menyimpan state antar pemanggilan fungsi.</li> <li>Saat membuat fungsi yang dapat dikustomisasi.</li> <li>Saat ingin menjaga data agar tetap private.</li> </ul> <p>\ud83d\udce6 Closure adalah salah satu fitur paling kuat dan paling sering digunakan dalam JavaScript modern, terutama dalam pengembangan berbasis event-driven dan functional programming.</p>"},{"location":"4_object-array/1_object/","title":"\ud83e\uddf1 Object dalam JavaScript","text":"<p>Object adalah salah satu tipe data paling penting dan fleksibel di JavaScript. Ia digunakan untuk menyimpan data dalam bentuk pasangan key-value.</p>"},{"location":"4_object-array/1_object/#1-pengenalan-object","title":"1. Pengenalan Object","text":"<p>Object adalah koleksi properti, di mana setiap properti terdiri dari key (nama properti) dan value (nilai).</p> <pre><code>const orang = {\n  nama: \"Marno\",\n  umur: 22,\n  pekerjaan: \"Programmer\",\n};\n````\n\n---\n\n## 2. Mengakses Properti\n\n### a. Dot Notation\n\n```javascript\nconsole.log(orang.nama); // Output: Marno\n</code></pre>"},{"location":"4_object-array/1_object/#b-bracket-notation","title":"b. Bracket Notation","text":"<pre><code>console.log(orang[\"umur\"]); // Output: 22\n</code></pre> <p>Gunakan bracket notation saat key disimpan sebagai variabel atau mengandung spasi/simbol.</p>"},{"location":"4_object-array/1_object/#3-menambah-mengubah-properti","title":"3. Menambah &amp; Mengubah Properti","text":"<pre><code>orang.alamat = \"Malaysia\";         // Menambah\norang.umur = 23;                   // Mengubah\n</code></pre>"},{"location":"4_object-array/1_object/#4-menghapus-properti","title":"4. Menghapus Properti","text":"<pre><code>delete orang.pekerjaan;\n</code></pre>"},{"location":"4_object-array/1_object/#5-object-di-dalam-object-nested-object","title":"5. Object di Dalam Object (Nested Object)","text":"<pre><code>const user = {\n  nama: \"Budi\",\n  kontak: {\n    email: \"budi@email.com\",\n    telp: \"08123456789\"\n  }\n};\n\nconsole.log(user.kontak.email);\n</code></pre>"},{"location":"4_object-array/1_object/#6-object-method","title":"6. Object Method","text":"<p>Fungsi di dalam object disebut method:</p> <pre><code>const kalkulator = {\n  tambah: function(a, b) {\n    return a + b;\n  }\n};\n\nconsole.log(kalkulator.tambah(3, 4)); // Output: 7\n</code></pre>"},{"location":"4_object-array/1_object/#7-shorthand-property-method-es6","title":"7. Shorthand Property &amp; Method (ES6)","text":"<pre><code>const nama = \"Siti\";\nconst umur = 20;\n\nconst user = {\n  nama,\n  umur,\n  sapa() {\n    return `Halo, saya ${this.nama}`;\n  }\n};\n</code></pre>"},{"location":"4_object-array/1_object/#8-iterasi-properti-object","title":"8. Iterasi Properti Object","text":"<p>Gunakan <code>for...in</code> untuk iterasi key:</p> <pre><code>for (let key in orang) {\n  console.log(`${key}: ${orang[key]}`);\n}\n</code></pre>"},{"location":"4_object-array/1_object/#tantangan-cepat","title":"Tantangan Cepat","text":"<ol> <li>Buat object <code>produk</code> dengan properti <code>nama</code>, <code>harga</code>, dan <code>stok</code>.</li> <li>Tambahkan method <code>infoProduk()</code> yang mencetak informasi produk.</li> </ol> <pre><code>const produk = {\n  nama: \"Kopi Robusta\",\n  harga: 25000,\n  stok: 50,\n  infoProduk() {\n    return `${this.nama} - Rp${this.harga} (Stok: ${this.stok})`;\n  }\n};\n\nconsole.log(produk.infoProduk());\n</code></pre> <p>\u201cObject adalah cara JavaScript memberi makna pada data.\u201d \u2013 Anonymous</p>"},{"location":"4_object-array/2_array/","title":"\ud83d\udcda Array di JavaScript","text":"<p>Array adalah struktur data di JavaScript yang digunakan untuk menyimpan banyak nilai dalam satu variabel. Array diakses dengan indeks numerik yang dimulai dari nol.</p>"},{"location":"4_object-array/2_array/#cara-membuat-array","title":"\ud83e\uddf1 Cara Membuat Array","text":"<pre><code>let buah = [\"Apel\", \"Jeruk\", \"Mangga\"];\nconsole.log(buah); // [\"Apel\", \"Jeruk\", \"Mangga\"]\n````\n\n---\n\n## \ud83d\udd01 Akses dan Manipulasi Elemen\n\n```javascript\nconsole.log(buah[0]); // Apel\n\nbuah[1] = \"Pisang\";\nconsole.log(buah); // [\"Apel\", \"Pisang\", \"Mangga\"]\n</code></pre>"},{"location":"4_object-array/2_array/#method-umum-array","title":"\ud83d\udd28 Method Umum Array","text":"Method Kegunaan <code>push()</code> Menambahkan elemen di akhir <code>pop()</code> Menghapus elemen terakhir <code>shift()</code> Menghapus elemen pertama <code>unshift()</code> Menambahkan elemen di awal <code>splice()</code> Menambah/menghapus di posisi tertentu <code>slice()</code> Mengambil sebagian array (tidak mengubah) <code>forEach()</code> Iterasi setiap elemen <code>map()</code> Menghasilkan array baru dari transformasi"},{"location":"4_object-array/2_array/#contoh","title":"\ud83e\uddea Contoh:","text":"<pre><code>let angka = [1, 2, 3, 4, 5];\n\nlet kuadrat = angka.map(function(x) {\n  return x * x;\n});\n\nconsole.log(kuadrat); // [1, 4, 9, 16, 25]\n</code></pre>"},{"location":"4_object-array/2_array/#nested-array","title":"\ud83d\udce6 Nested Array","text":"<p>Array bisa berisi array lain:</p> <pre><code>let matriks = [\n  [1, 2],\n  [3, 4]\n];\n\nconsole.log(matriks[1][0]); // 3\n</code></pre>"},{"location":"4_object-array/2_array/#catatan","title":"\ud83e\udde0 Catatan","text":"<ul> <li>Array di JavaScript bersifat dinamis (ukuran dapat berubah).</li> <li>Tipe data elemen bisa campur (number, string, objek, dll).</li> <li>Gunakan <code>Array.isArray()</code> untuk memeriksa apakah sebuah variabel adalah array.</li> </ul> <pre><code>Array.isArray([1, 2, 3]); // true\n</code></pre> <p>\u23ed\ufe0f Selanjutnya: Kontrol Alur Program</p>"},{"location":"4_object-array/3_destructuring/","title":"\ud83e\udde9 Destructuring di JavaScript","text":"<p>Destructuring adalah fitur ES6 yang memungkinkan kita mengekstrak nilai dari array atau properti dari objek ke dalam variabel yang terpisah dengan sintaks yang lebih ringkas dan bersih.</p>"},{"location":"4_object-array/3_destructuring/#array-destructuring","title":"\ud83d\udce6 Array Destructuring","text":"<pre><code>const buah = ['apel', 'mangga', 'jeruk'];\n\nconst [buah1, buah2, buah3] = buah;\n\nconsole.log(buah1); // apel\nconsole.log(buah2); // mangga\nconsole.log(buah3); // jeruk\n````\n\n### \u2705 Skip item tertentu\n\n```javascript\nconst [,, buahTerakhir] = buah;\nconsole.log(buahTerakhir); // jeruk\n</code></pre>"},{"location":"4_object-array/3_destructuring/#object-destructuring","title":"\ud83e\uddf1 Object Destructuring","text":"<pre><code>const user = {\n  nama: \"Budi\",\n  umur: 25,\n  negara: \"Indonesia\"\n};\n\nconst { nama, umur, negara } = user;\n\nconsole.log(nama);   // Budi\nconsole.log(umur);   // 25\nconsole.log(negara); // Indonesia\n</code></pre>"},{"location":"4_object-array/3_destructuring/#rename-saat-destructuring","title":"\ud83e\uddea Rename saat destructuring","text":"<pre><code>const { nama: namaLengkap } = user;\nconsole.log(namaLengkap); // Budi\n</code></pre>"},{"location":"4_object-array/3_destructuring/#default-value","title":"\ud83e\uddea Default value","text":"<pre><code>const { pekerjaan = 'Belum diketahui' } = user;\nconsole.log(pekerjaan); // Belum diketahui\n</code></pre>"},{"location":"4_object-array/3_destructuring/#destructuring-di-parameter-function","title":"\ud83e\udde0 Destructuring di Parameter Function","text":"<pre><code>function tampilkanProfil({ nama, umur }) {\n  console.log(`Nama: ${nama}, Umur: ${umur}`);\n}\n\ntampilkanProfil(user);\n// Output: Nama: Budi, Umur: 25\n</code></pre>"},{"location":"4_object-array/3_destructuring/#kesimpulan","title":"\ud83d\udcda Kesimpulan","text":"<p>Destructuring membuat kode JavaScript lebih ringkas, jelas, dan efisien, terutama saat bekerja dengan struktur data kompleks. Fitur ini sangat cocok digunakan dalam kombinasi dengan fungsi, array, dan objek besar.</p>"},{"location":"5_dom/1_seleksi/","title":"\ud83d\udd0d Seleksi Elemen DOM","text":"<p>DOM (Document Object Model) adalah representasi struktur halaman web yang dapat diakses dan dimanipulasi menggunakan JavaScript.</p> <p>Langkah pertama untuk memanipulasi DOM adalah menyeleksi elemen yang ingin dimodifikasi.</p>"},{"location":"5_dom/1_seleksi/#documentgetelementbyid","title":"\ud83d\udccc <code>document.getElementById()</code>","text":"<p>Menyeleksi elemen berdasarkan nilai <code>id</code>.</p> <pre><code>const heading = document.getElementById(\"judul\");\nconsole.log(heading.textContent);\n````\n\n---\n\n## \ud83d\udccc `document.getElementsByClassName()`\n\nMenyeleksi elemen berdasarkan class. Mengembalikan HTMLCollection (mirip array).\n\n```javascript\nconst kotak = document.getElementsByClassName(\"kotak\");\nconsole.log(kotak[0]);\n</code></pre>"},{"location":"5_dom/1_seleksi/#documentgetelementsbytagname","title":"\ud83d\udccc <code>document.getElementsByTagName()</code>","text":"<p>Menyeleksi elemen berdasarkan tag HTML.</p> <pre><code>const paragraf = document.getElementsByTagName(\"p\");\nconsole.log(paragraf.length);\n</code></pre>"},{"location":"5_dom/1_seleksi/#documentqueryselector","title":"\ud83d\udccc <code>document.querySelector()</code>","text":"<p>Menyeleksi elemen pertama yang cocok dengan selector CSS.</p> <pre><code>const tombol = document.querySelector(\".btn\");\n</code></pre>"},{"location":"5_dom/1_seleksi/#documentqueryselectorall","title":"\ud83d\udccc <code>document.querySelectorAll()</code>","text":"<p>Menyeleksi semua elemen yang cocok dengan selector CSS. Mengembalikan NodeList.</p> <pre><code>const semuaKotak = document.querySelectorAll(\".kotak\");\nsemuaKotak.forEach(k =&gt; console.log(k));\n</code></pre>"},{"location":"5_dom/1_seleksi/#perbedaan-getelement-vs-queryselector","title":"\ud83e\udde0 Perbedaan <code>getElement</code> vs <code>querySelector</code>","text":"Metode Hasil Selector seperti CSS? <code>getElementById()</code> 1 elemen (ID) \u274c Tidak <code>getElementsByClassName()</code> HTMLCollection \u274c Tidak <code>querySelector()</code> 1 elemen \u2705 Ya <code>querySelectorAll()</code> NodeList \u2705 Ya"},{"location":"5_dom/1_seleksi/#tips-tambahan","title":"\ud83e\uddea Tips Tambahan","text":"<ul> <li>NodeList dari <code>querySelectorAll()</code> bisa langsung di-loop pakai <code>.forEach()</code>.</li> <li>Gunakan <code>const</code>/<code>let</code> untuk menyimpan elemen agar bisa digunakan kembali.</li> <li>Hindari terlalu sering seleksi ulang DOM yang sama untuk efisiensi.</li> </ul>"},{"location":"5_dom/1_seleksi/#kesimpulan","title":"\ud83d\udcda Kesimpulan","text":"<p>Menyeleksi elemen adalah fondasi dalam memanipulasi DOM. Gunakan metode yang paling sesuai dengan kebutuhan: berdasarkan <code>id</code>, <code>class</code>, <code>tag</code>, atau selector CSS.</p>"},{"location":"5_dom/2_manipulasi/","title":"\u2728 Manipulasi DOM","text":"<p>Manipulasi DOM (Document Object Model) adalah proses mengubah struktur, konten, atau gaya halaman web menggunakan JavaScript. Ini memungkinkan kita untuk membuat halaman web yang dinamis dan interaktif.</p>"},{"location":"5_dom/2_manipulasi/#mengubah-teks-atau-html","title":"Mengubah Teks atau HTML","text":"<p>Gunakan properti <code>.innerText</code> atau <code>.innerHTML</code> untuk mengubah isi elemen.</p> <pre><code>const judul = document.getElementById(\"judul\");\njudul.innerText = \"Selamat Datang!\";\njudul.innerHTML = \"&lt;em&gt;Selamat Datang!&lt;/em&gt;\";\n````\n\n## Mengubah Atribut\n\nGunakan `.setAttribute()` atau properti langsung seperti `.href`, `.src`, dll.\n\n```javascript\nconst link = document.querySelector(\"a\");\nlink.setAttribute(\"href\", \"https://www.google.com\");\nlink.href = \"https://www.google.com\";\n</code></pre>"},{"location":"5_dom/2_manipulasi/#mengubah-gaya-style","title":"Mengubah Gaya (Style)","text":"<pre><code>const box = document.querySelector(\".box\");\nbox.style.backgroundColor = \"blue\";\nbox.style.fontSize = \"20px\";\n</code></pre>"},{"location":"5_dom/2_manipulasi/#menambahkan-atau-menghapus-kelas","title":"Menambahkan atau Menghapus Kelas","text":"<p>Gunakan <code>classList</code> untuk manipulasi kelas:</p> <pre><code>const tombol = document.querySelector(\"button\");\ntombol.classList.add(\"aktif\");\ntombol.classList.remove(\"nonaktif\");\ntombol.classList.toggle(\"aktif\");\n</code></pre>"},{"location":"5_dom/2_manipulasi/#menambahkan-atau-menghapus-elemen","title":"Menambahkan atau Menghapus Elemen","text":""},{"location":"5_dom/2_manipulasi/#menambahkan-elemen","title":"Menambahkan Elemen","text":"<pre><code>const list = document.querySelector(\"ul\");\nconst itemBaru = document.createElement(\"li\");\nitemBaru.textContent = \"Item Baru\";\nlist.appendChild(itemBaru);\n</code></pre>"},{"location":"5_dom/2_manipulasi/#menghapus-elemen","title":"Menghapus Elemen","text":"<pre><code>const itemHapus = document.querySelector(\"li\");\nitemHapus.remove();\n</code></pre>"},{"location":"5_dom/2_manipulasi/#menyalin-elemen","title":"Menyalin Elemen","text":"<pre><code>const original = document.querySelector(\".kotak\");\nconst salinan = original.cloneNode(true);\ndocument.body.appendChild(salinan);\n</code></pre> <p>\ud83d\udccc Tips:</p> <ul> <li>Gunakan <code>appendChild</code>, <code>insertBefore</code>, atau <code>replaceChild</code> untuk manipulasi tingkat lanjut.</li> <li>Hindari manipulasi DOM secara berlebihan untuk performa yang optimal.</li> </ul>"},{"location":"5_dom/3_event/","title":"\ud83c\udfaf Event pada DOM","text":"<p>Event adalah aksi yang terjadi di dalam browser, seperti klik, hover, input, atau submit. JavaScript memungkinkan kita untuk merespon event tersebut melalui event listener.</p>"},{"location":"5_dom/3_event/#dasar-event-listener","title":"Dasar Event Listener","text":"<p>Gunakan <code>addEventListener</code> untuk menambahkan event handler:</p> <pre><code>const tombol = document.querySelector(\"button\");\n\ntombol.addEventListener(\"click\", function() {\n  alert(\"Tombol diklik!\");\n});\n````\n\n## Jenis-Jenis Event Umum\n\n| Event       | Kapan Terjadi                           |\n| ----------- | --------------------------------------- |\n| `click`     | Saat elemen diklik                      |\n| `mouseover` | Saat kursor berada di atas elemen       |\n| `mouseout`  | Saat kursor keluar dari elemen          |\n| `keydown`   | Saat tombol keyboard ditekan            |\n| `submit`    | Saat form dikirim                       |\n| `change`    | Saat input atau select berubah          |\n| `load`      | Saat halaman atau elemen selesai dimuat |\n\n## Contoh: Event Input\n\n```javascript\nconst input = document.querySelector(\"input\");\ninput.addEventListener(\"input\", function() {\n  console.log(\"Isi input:\", input.value);\n});\n</code></pre>"},{"location":"5_dom/3_event/#menghapus-event-listener","title":"Menghapus Event Listener","text":"<p>Gunakan fungsi terpisah agar bisa dihapus:</p> <pre><code>function handlerKlik() {\n  alert(\"Event aktif\");\n}\n\ntombol.addEventListener(\"click\", handlerKlik);\ntombol.removeEventListener(\"click\", handlerKlik);\n</code></pre>"},{"location":"5_dom/3_event/#event-object","title":"Event Object","text":"<p>Event listener dapat menerima objek event sebagai parameter untuk informasi tambahan:</p> <pre><code>tombol.addEventListener(\"click\", function(e) {\n  console.log(\"Elemen yang diklik:\", e.target);\n});\n</code></pre>"},{"location":"5_dom/3_event/#event-delegation","title":"Event Delegation","text":"<p>Gunakan event delegation untuk efisiensi (terutama pada elemen dinamis):</p> <pre><code>document.querySelector(\"ul\").addEventListener(\"click\", function(e) {\n  if (e.target.tagName === \"LI\") {\n    alert(\"Item: \" + e.target.textContent);\n  }\n});\n</code></pre> <p>\ud83d\udccc Tips:</p> <ul> <li>Gunakan event delegation untuk performa dan manajemen yang lebih baik.</li> <li>Hindari penggunaan <code>onclick=\"...\"</code> langsung di HTML (inline handler), gunakan JavaScript murni.</li> </ul>"},{"location":"6_async/1_callback/","title":"\ud83d\udd04 Callback di JavaScript","text":"<p>Callback adalah fungsi yang dikirimkan sebagai argumen ke fungsi lain dan dieksekusi setelah suatu proses selesai. Ini merupakan dasar dari asynchronous programming di JavaScript.</p>"},{"location":"6_async/1_callback/#kenapa-callback","title":"Kenapa Callback?","text":"<p>Karena JavaScript bersifat non-blocking dan asynchronous, callback digunakan untuk menangani operasi yang memakan waktu, seperti:</p> <ul> <li>Pembacaan file</li> <li>Permintaan HTTP</li> <li>Timeout dan interval</li> </ul>"},{"location":"6_async/1_callback/#contoh-sederhana","title":"Contoh Sederhana","text":"<pre><code>function halo(nama, callback) {\n  console.log(\"Halo, \" + nama);\n  callback();\n}\n\nfunction selesai() {\n  console.log(\"Selesai dipanggil.\");\n}\n\nhalo(\"Marno\", selesai);\n````\n\n## Callback dengan setTimeout\n\n```javascript\nconsole.log(\"Mulai\");\n\nsetTimeout(function() {\n  console.log(\"Tertunda 2 detik\");\n}, 2000);\n\nconsole.log(\"Selesai\");\n</code></pre> <p>Output:</p> <pre><code>Mulai\nSelesai\nTertunda 2 detik\n</code></pre>"},{"location":"6_async/1_callback/#callback-pada-array","title":"Callback pada Array","text":"<pre><code>const angka = [1, 2, 3, 4];\n\nangka.forEach(function(nilai) {\n  console.log(nilai);\n});\n</code></pre>"},{"location":"6_async/1_callback/#callback-hell","title":"Callback Hell \ud83d\ude35","text":"<p>Terlalu banyak callback bersarang dapat membuat kode susah dibaca:</p> <pre><code>loginUser(\"user\", function(user) {\n  ambilData(user.id, function(data) {\n    simpanData(data, function(res) {\n      console.log(\"Selesai\", res);\n    });\n  });\n});\n</code></pre> <p>Solusi:</p> <ul> <li>Gunakan Promise</li> <li>Gunakan Async/Await</li> </ul> <p>\ud83d\udccc Tips:</p> <ul> <li>Callback sebaiknya ditulis sebagai named function jika akan digunakan ulang.</li> <li>Gunakan teknik modern seperti Promise atau Async/Await untuk kode lebih bersih. </li> </ul>"},{"location":"6_async/2_promise/","title":"\ud83d\udcac Promise di JavaScript","text":"<p><code>Promise</code> adalah objek yang merepresentasikan selesainya (atau gagalnya) sebuah operasi asynchronous di masa depan.</p> <p>Promise memberikan cara yang lebih bersih dan elegan dibanding callback, terutama untuk menghindari callback hell.</p>"},{"location":"6_async/2_promise/#konsep-dasar","title":"\ud83e\udde0 Konsep Dasar","text":"<p>Sebuah <code>Promise</code> memiliki 3 status:</p> <ul> <li><code>pending</code>: masih dalam proses</li> <li><code>fulfilled</code>: berhasil</li> <li><code>rejected</code>: gagal</li> </ul> <pre><code>const janji = new Promise((resolve, reject) =&gt; {\n  const success = true;\n\n  if (success) {\n    resolve(\"Berhasil!\");\n  } else {\n    reject(\"Gagal!\");\n  }\n});\n````\n\n---\n\n## \u2705 Menangani Promise\n\n```javascript\njanji\n  .then((hasil) =&gt; {\n    console.log(\"Berhasil:\", hasil);\n  })\n  .catch((error) =&gt; {\n    console.log(\"Gagal:\", error);\n  });\n</code></pre>"},{"location":"6_async/2_promise/#contoh-asynchronous","title":"\ud83d\udd70 Contoh Asynchronous","text":"<pre><code>function ambilData() {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      const berhasil = true;\n\n      if (berhasil) {\n        resolve(\"Data berhasil diambil\");\n      } else {\n        reject(\"Terjadi kesalahan\");\n      }\n    }, 2000);\n  });\n}\n\nambilData()\n  .then((data) =&gt; console.log(data))\n  .catch((err) =&gt; console.error(err));\n</code></pre>"},{"location":"6_async/2_promise/#promise-chaining","title":"\ud83d\udd17 Promise Chaining","text":"<pre><code>function proses1() {\n  return Promise.resolve(\"Langkah 1\");\n}\n\nfunction proses2(data) {\n  return Promise.resolve(data + \" -&gt; Langkah 2\");\n}\n\nproses1()\n  .then(proses2)\n  .then((hasil) =&gt; console.log(hasil));\n</code></pre>"},{"location":"6_async/2_promise/#promiseall","title":"\ud83e\uddef Promise.all","text":"<p>Menjalankan beberapa promise sekaligus:</p> <pre><code>const p1 = Promise.resolve(\"Satu\");\nconst p2 = Promise.resolve(\"Dua\");\nconst p3 = Promise.resolve(\"Tiga\");\n\nPromise.all([p1, p2, p3]).then((nilai) =&gt; {\n  console.log(nilai); // ['Satu', 'Dua', 'Tiga']\n});\n</code></pre> <p>\ud83d\udccc Tips:</p> <ul> <li>Gunakan <code>.finally()</code> untuk menjalankan sesuatu setelah <code>then</code>/<code>catch</code> selesai.</li> <li>Lebih baik gunakan async/await untuk meningkatkan keterbacaan.</li> </ul> <p>\u27a1\ufe0f Selanjutnya: <code>Async/Await</code></p>"},{"location":"6_async/3_async-await/","title":"Async/Await","text":""},{"location":"6_async/3_async-await/#async-await-di-javascript","title":"\u23f3 Async &amp; Await di JavaScript","text":"<p><code>async</code> dan <code>await</code> adalah sintaks modern JavaScript untuk menangani operasi asynchronous yang lebih mudah dibaca dibandingkan dengan chaining <code>.then()</code> pada <code>Promise</code>.</p>"},{"location":"6_async/3_async-await/#dasar-penggunaan","title":"\ud83d\udd27 Dasar Penggunaan","text":"<pre><code>async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const json = await response.json();\n    console.log(json);\n  } catch (error) {\n    console.error('Terjadi error:', error);\n  }\n}\n</code></pre>"},{"location":"6_async/3_async-await/#penjelasan","title":"\ud83e\udde0 Penjelasan","text":"<ul> <li><code>async</code> digunakan untuk mendeklarasikan fungsi yang mengembalikan Promise.</li> <li><code>await</code> hanya bisa digunakan di dalam fungsi async, menunggu promise selesai sebelum melanjutkan eksekusi.</li> </ul>"},{"location":"6_async/3_async-await/#catatan-penting","title":"\u26a0\ufe0f Catatan Penting","text":"<ul> <li>Error harus ditangani dengan <code>try...catch</code>.</li> <li>Tidak bisa digunakan di luar fungsi async (kecuali di top-level async function, jika environment mendukung).</li> </ul>"},{"location":"6_async/3_async-await/#contoh-lain","title":"\ud83d\udca1 Contoh Lain","text":"<pre><code>const getUser = async (id) =&gt; {\n  const res = await fetch(`https://api.example.com/users/${id}`);\n  return res.json();\n};\n\ngetUser(2)\n  .then(user =&gt; console.log(user))\n  .catch(err =&gt; console.log(err));\n</code></pre>"},{"location":"6_async/3_async-await/#kapan-digunakan","title":"\ud83d\udccc Kapan Digunakan?","text":"<p>Gunakan <code>async/await</code>:</p> <ul> <li>Jika kamu ingin membuat kode async tampak seperti kode sync</li> <li>Jika kamu ingin menghindari chaining <code>.then().then().catch()</code></li> </ul>"},{"location":"7_modularisasi/1_es6-modules/","title":"ES Modules","text":""},{"location":"7_modularisasi/1_es6-modules/#es6-modules","title":"\ud83d\udce6 ES6 Modules","text":"<p>Sejak ES6, JavaScript mendukung modularisasi secara native melalui <code>import</code> dan <code>export</code>. Ini memungkinkan kita untuk memisahkan kode ke dalam file yang lebih kecil dan lebih terorganisir.</p>"},{"location":"7_modularisasi/1_es6-modules/#export","title":"\ud83d\ude80 Export","text":"<p>Kita bisa mengekspor variabel, fungsi, atau class dari suatu file agar dapat digunakan di file lain.</p> <pre><code>// math.js\nexport const PI = 3.14;\n\nexport function tambah(a, b) {\n  return a + b;\n}\n\nexport class Kalkulator {\n  static kurang(a, b) {\n    return a - b;\n  }\n}\n</code></pre>"},{"location":"7_modularisasi/1_es6-modules/#import","title":"\ud83d\udce5 Import","text":"<p>Gunakan <code>import</code> untuk mengambil kode dari file lain.</p> <pre><code>// main.js\nimport { PI, tambah, Kalkulator } from './math.js';\n\nconsole.log(PI); // 3.14\nconsole.log(tambah(2, 3)); // 5\nconsole.log(Kalkulator.kurang(10, 3)); // 7\n</code></pre>"},{"location":"7_modularisasi/1_es6-modules/#default-export","title":"\ud83e\udde9 Default Export","text":"<p>Kita juga bisa mengekspor satu nilai default dari sebuah modul.</p> <pre><code>// message.js\nexport default function hello() {\n  console.log(\"Hello dari modul!\");\n}\n</code></pre> <pre><code>// app.js\nimport hello from './message.js';\n\nhello(); // Hello dari modul!\n</code></pre>"},{"location":"7_modularisasi/1_es6-modules/#catatan","title":"\u26a0\ufe0f Catatan","text":"<ul> <li>File harus menggunakan ekstensi <code>.js</code> dan dijalankan dalam environment yang mendukung ES Module (misalnya melalui bundler seperti Webpack/Vite, atau pakai <code>type=\"module\"</code> di HTML).</li> <li>Path relatif (./, ../) wajib saat mengimport file lokal.</li> </ul>"},{"location":"7_modularisasi/1_es6-modules/#kapan-menggunakan","title":"\u2705 Kapan Menggunakan?","text":"<p>Gunakan modularisasi jika:</p> <ul> <li>Proyek mulai membesar dan banyak file</li> <li>Ingin memisahkan tanggung jawab kode</li> <li>Mempermudah testing dan pemeliharaan</li> </ul>"},{"location":"7_modularisasi/2_commonjs/","title":"CommonJS","text":""},{"location":"7_modularisasi/2_commonjs/#commonjs","title":"\ud83e\uddf1 CommonJS","text":"<p>CommonJS adalah sistem modul yang digunakan secara luas di Node.js sebelum ES6 Modules hadir. Modul CommonJS menggunakan <code>require()</code> untuk impor dan <code>module.exports</code> untuk ekspor.</p>"},{"location":"7_modularisasi/2_commonjs/#ekspor","title":"\ud83d\udce4 Ekspor","text":"<pre><code>// math.js\nconst PI = 3.14;\n\nfunction tambah(a, b) {\n  return a + b;\n}\n\nmodule.exports = {\n  PI,\n  tambah,\n};\n</code></pre>"},{"location":"7_modularisasi/2_commonjs/#impor","title":"\ud83d\udce5 Impor","text":"<pre><code>// main.js\nconst math = require('./math');\n\nconsole.log(math.PI); // 3.14\nconsole.log(math.tambah(2, 3)); // 5\n</code></pre>"},{"location":"7_modularisasi/2_commonjs/#sifat-sifat-commonjs","title":"\ud83d\udce6 Sifat-sifat CommonJS","text":"<ul> <li>Sinkron: Impor dilakukan secara sinkron, cocok untuk environment seperti server (Node.js).</li> <li>Dijalankan sekali: Ketika sebuah modul diimpor, kode di dalamnya hanya dijalankan sekali (cached).</li> <li>Ekspor fleksibel: Bisa mengekspor satu objek besar atau bagian-bagian tertentu saja.</li> </ul>"},{"location":"7_modularisasi/2_commonjs/#perbedaan-dengan-es6-modules","title":"\u26a0\ufe0f Perbedaan dengan ES6 Modules","text":"Fitur CommonJS ES6 Modules Keyword Impor <code>require()</code> <code>import</code> Keyword Ekspor <code>module.exports</code> <code>export</code> / <code>export default</code> Waktu Evaluasi Saat runtime Saat compile Lingkungan Umum Node.js Browser, bundler"},{"location":"7_modularisasi/2_commonjs/#kapan-menggunakan-commonjs","title":"\ud83c\udfaf Kapan Menggunakan CommonJS?","text":"<ul> <li>Saat membangun aplikasi Node.js yang tidak perlu bundler</li> <li>Saat menggunakan modul lama yang belum mendukung ES6</li> </ul> <p>\u2139\ufe0f Mulai Node.js v14+, ES Modules sudah lebih stabil. Tapi CommonJS masih sangat relevan dan banyak digunakan di ekosistem Node.js.</p>"},{"location":"8_error-handling/1_try-catch/","title":"Try/Catch","text":""},{"location":"8_error-handling/1_try-catch/#try-catch","title":"\ud83d\udee0\ufe0f Try-Catch","text":"<p><code>try-catch</code> adalah struktur kontrol di JavaScript untuk menangani error atau pengecualian (exception) tanpa menghentikan eksekusi program.</p>"},{"location":"8_error-handling/1_try-catch/#struktur-dasar","title":"\ud83e\uddea Struktur Dasar","text":"<pre><code>try {\n  // kode yang berpotensi error\n} catch (error) {\n  // penanganan error\n}\n</code></pre>"},{"location":"8_error-handling/1_try-catch/#contoh-penggunaan","title":"\ud83d\udccc Contoh Penggunaan","text":"<pre><code>try {\n  let hasil = 10 / 0;\n  console.log(hasil);\n\n  tidakAdaFungsi(); // ini akan menyebabkan error\n} catch (err) {\n  console.error('Terjadi error:', err.message);\n}\n</code></pre>"},{"location":"8_error-handling/1_try-catch/#blok-finally","title":"\ud83d\udd01 Blok Finally","text":"<p>Blok <code>finally</code> akan selalu dijalankan, baik terjadi error maupun tidak.</p> <pre><code>try {\n  console.log('Mulai');\n  JSON.parse('ini bukan json');\n} catch (e) {\n  console.error('Kesalahan parsing:', e.message);\n} finally {\n  console.log('Selesai mencoba!');\n}\n</code></pre>"},{"location":"8_error-handling/1_try-catch/#properti-objek-error","title":"\ud83d\udcd9 Properti Objek Error","text":"<ul> <li><code>message</code>: Pesan error</li> <li><code>name</code>: Nama error (<code>ReferenceError</code>, <code>SyntaxError</code>, dll)</li> <li><code>stack</code>: Informasi stack trace</li> </ul>"},{"location":"8_error-handling/1_try-catch/#penting","title":"\u2757 Penting","text":"<ul> <li>Jangan gunakan <code>try-catch</code> untuk kontrol alur program biasa.</li> <li>Gunakan untuk menangani kemungkinan error eksternal: parsing data, operasi file, koneksi API, dll.</li> </ul> <p>\u2705 Gunakan <code>try-catch</code> untuk membuat program Anda lebih tahan banting terhadap kondisi tak terduga.</p>"},{"location":"8_error-handling/2_debugging/","title":"Debugging","text":""},{"location":"8_error-handling/2_debugging/#debugging-di-javascript","title":"\ud83d\udc1e Debugging di JavaScript","text":"<p>Debugging adalah proses menemukan dan memperbaiki bug atau kesalahan dalam kode. JavaScript menyediakan berbagai alat dan teknik untuk membantu proses ini.</p>"},{"location":"8_error-handling/2_debugging/#teknik-debugging-umum","title":"\ud83d\udd0d Teknik Debugging Umum","text":""},{"location":"8_error-handling/2_debugging/#1-consolelog","title":"1. <code>console.log()</code>","text":"<p>Cara termudah dan paling umum:</p> <pre><code>let hasil = hitungNilai(5);\nconsole.log('Nilai hasil:', hasil);\n</code></pre>"},{"location":"8_error-handling/2_debugging/#2-consoleerror-consolewarn","title":"2. <code>console.error()</code> &amp; <code>console.warn()</code>","text":"<p>Untuk menandai error atau peringatan:</p> <pre><code>console.error('Terjadi kesalahan!');\nconsole.warn('Peringatan: nilai tidak valid!');\n</code></pre>"},{"location":"8_error-handling/2_debugging/#3-menggunakan-debugger","title":"3. Menggunakan <code>debugger</code>","text":"<p>Perintah <code>debugger</code> akan menghentikan eksekusi saat titik itu, jika DevTools terbuka.</p> <pre><code>function hitung(a, b) {\n  debugger;\n  return a + b;\n}\n</code></pre>"},{"location":"8_error-handling/2_debugging/#4-browser-devtools","title":"4. Browser DevTools","text":"<p>Gunakan Developer Tools di browser:</p> <ul> <li>Console: melihat log/error</li> <li>Sources: set breakpoint, jalankan step-by-step</li> <li>Network: pantau permintaan HTTP</li> </ul>"},{"location":"8_error-handling/2_debugging/#tips-debugging-efektif","title":"\ud83e\udde0 Tips Debugging Efektif","text":"<ul> <li>Reproduksi bug secara konsisten</li> <li>Cek log step-by-step</li> <li>Gunakan breakpoint di bagian penting</li> <li>Cek alur data dan nilai variabel</li> <li>Jangan buru-buru menyalahkan framework\u2014coba isolasi kasusnya</li> </ul>"},{"location":"8_error-handling/2_debugging/#tools-tambahan","title":"\ud83d\udce6 Tools Tambahan","text":"<ul> <li>VS Code Debugger: integrasi debugging langsung di editor</li> <li>Linting tools (ESLint): mendeteksi potensi bug saat mengetik</li> <li>Testing tools: Jest, Mocha untuk uji otomatis</li> </ul> <p>\ud83c\udfaf Debugging bukan hanya mencari kesalahan, tapi memahami bagaimana kode bekerja \u2014 dan mengapa ia gagal.</p>"},{"location":"9_best-practices/1_penamaan/","title":"Penamaan","text":""},{"location":"9_best-practices/1_penamaan/#praktik-terbaik-penamaan-naming","title":"\u270d\ufe0f Praktik Terbaik: Penamaan (Naming)","text":"<p>Penamaan yang baik adalah kunci dari kode yang mudah dibaca dan dipelihara. JavaScript tidak mewajibkan format tertentu, tapi ada konvensi umum yang disarankan oleh komunitas.</p>"},{"location":"9_best-practices/1_penamaan/#aturan-umum-penamaan","title":"\ud83d\udccc Aturan Umum Penamaan","text":"<ul> <li>Gunakan nama yang deskriptif dan jelas</li> </ul> <p><code>js   let jumlahSiswa = 30; // \u2705 jelas   let x = 30;           // \u274c tidak informatif</code></p> <ul> <li>Gunakan Bahasa Inggris</li> </ul> <p><code>js   let studentCount = 30; // \u2705   let jumlahSiswa = 30;  // \u274c campur aduk</code></p> <ul> <li>Hindari singkatan kecuali sudah umum</li> </ul> <p><code>js   let isValid = true;     // \u2705   let iv = true;          // \u274c</code></p>"},{"location":"9_best-practices/1_penamaan/#konvensi-penamaan-berdasarkan-jenis","title":"\ud83e\uddf1 Konvensi Penamaan Berdasarkan Jenis","text":"Jenis Format Contoh Variabel camelCase <code>totalAmount</code>, <code>userName</code> Fungsi camelCase <code>getData()</code>, <code>sendEmail()</code> Konstanta UPPER_SNAKE <code>MAX_USERS</code>, <code>API_KEY</code> Class / Constructor PascalCase <code>UserProfile</code>, <code>Invoice</code> File / Modul kebab-case <code>user-service.js</code>"},{"location":"9_best-practices/1_penamaan/#nama-yang-buruk-vs-nama-yang-baik","title":"\ud83e\udd14 Nama yang Buruk vs Nama yang Baik","text":"Buruk Baik Alasan <code>d</code> <code>duration</code> Lebih deskriptif <code>data</code> <code>userList</code> Spesifik terhadap isi <code>val1</code> <code>startDate</code> Representasi makna jelas"},{"location":"9_best-practices/1_penamaan/#tips-bonus","title":"\u2728 Tips Bonus","text":"<ul> <li>Gunakan kata kerja untuk nama fungsi \u2192 <code>getUser()</code>, <code>sendEmail()</code></li> <li>Gunakan kata benda untuk variabel \u2192 <code>user</code>, <code>invoiceData</code></li> <li>Jangan ragu membuat nama agak panjang asal jelas</li> <li>Konsisten dalam penamaan di seluruh proyek</li> </ul> <p>\ud83d\udcd6 \u201cCode is read more often than it is written.\u201d \u2014 Robert C. Martin (Clean Code)</p>"},{"location":"9_best-practices/2_clean-code/","title":"Clean Code","text":""},{"location":"9_best-practices/2_clean-code/#praktik-terbaik-clean-code-di-javascript","title":"\ud83e\uddfc Praktik Terbaik: Clean Code di JavaScript","text":"<p>Menulis clean code bukan sekadar membuat kode bisa jalan, tapi membuatnya mudah dipahami, diperbaiki, dan dikembangkan. Tujuan utama clean code adalah komunikasi, bukan hanya instruksi ke mesin.</p>"},{"location":"9_best-practices/2_clean-code/#prinsip-prinsip-clean-code","title":"\ud83d\udccc Prinsip-Prinsip Clean Code","text":""},{"location":"9_best-practices/2_clean-code/#1-tulislah-kode-seolah-olah-orang-lain-yang-akan-membacanya-adalah-seorang-psikopat-yang-tahu-di-mana-kamu-tinggal","title":"1. Tulislah kode seolah-olah orang lain yang akan membacanya adalah seorang psikopat yang tahu di mana kamu tinggal.","text":"<ul> <li>Artinya: Buat kode yang jelas, aman, dan mudah dimengerti \ud83d\ude04</li> </ul>"},{"location":"9_best-practices/2_clean-code/#2-gunakan-nama-yang-jelas-dan-deskriptif","title":"2. Gunakan Nama yang Jelas dan Deskriptif","text":"<pre><code>// \u274c Buruk\nlet a = true;\n\n// \u2705 Baik\nlet isLoggedIn = true;\n</code></pre>"},{"location":"9_best-practices/2_clean-code/#3-fungsi-harus-melakukan-satu-tugas-spesifik","title":"3. Fungsi Harus Melakukan Satu Tugas Spesifik","text":"<pre><code>// \u274c Buruk\nfunction handleUser(user) {\n  validate(user);\n  saveToDB(user);\n  sendEmail(user);\n}\n\n// \u2705 Baik\nfunction validateUser(user) { ... }\nfunction saveUserToDB(user) { ... }\nfunction sendWelcomeEmail(user) { ... }\n</code></pre>"},{"location":"9_best-practices/2_clean-code/#4-hindari-duplikasi","title":"4. Hindari Duplikasi","text":"<p>\"Duplication is the root of all evil.\" \u2013 Don\u2019t Repeat Yourself (DRY)</p> <p>Gunakan fungsi atau modul untuk bagian kode yang berulang.</p>"},{"location":"9_best-practices/2_clean-code/#5-gunakan-default-parameter-destructuring","title":"5. Gunakan Default Parameter &amp; Destructuring","text":"<pre><code>// \u274c Buruk\nfunction createUser(data) {\n  let name = data.name || 'Unknown';\n}\n\n// \u2705 Baik\nfunction createUser({ name = 'Unknown' }) { ... }\n</code></pre>"},{"location":"9_best-practices/2_clean-code/#6-gunakan-early-return","title":"6. Gunakan Early Return","text":"<pre><code>// \u274c Buruk\nfunction isEligible(age) {\n  if (age &gt;= 18) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// \u2705 Baik\nfunction isEligible(age) {\n  return age &gt;= 18;\n}\n</code></pre>"},{"location":"9_best-practices/2_clean-code/#7-komentar-bukan-solusi-tapi-pilihan-terakhir","title":"7. Komentar Bukan Solusi, Tapi Pilihan Terakhir","text":"<p>Komentar bagus, tapi kode yang jelas lebih baik daripada komentar.</p> <pre><code>// \u274c Buruk\n// Mengecek apakah umur pengguna lebih dari 18\nif (user.age &gt; 18) { ... }\n\n// \u2705 Baik\nconst isAdult = user.age &gt; 18;\nif (isAdult) { ... }\n</code></pre>"},{"location":"9_best-practices/2_clean-code/#kesimpulan","title":"\u2728 Kesimpulan","text":"<p>Clean code adalah soal komunikasi. Kode yang bersih menjelaskan niat programmer, membantu kolaborasi tim, dan mengurangi biaya perawatan. Jangan sekadar membuatnya bekerja \u2014 buatlah ia berarti.</p> <p>\ud83e\udde0 \u201cClean code always looks like it was written by someone who cares.\u201d \u2014 Michael Feathers</p>"}]}